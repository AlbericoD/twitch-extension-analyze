{"version":3,"sources":["components/index.tsx","components/upload-csv.tsx","components/content.tsx","App.tsx","serviceWorker.ts","index.tsx","components/install-statistic.tsx","components/bits-statistic.tsx"],"names":["_upload_csv__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_content__WEBPACK_IMPORTED_MODULE_3__","ImportTwitchCSV","_ref","handleFileChosen","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","gutter","style","margin","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","span","className","antd_es_input__WEBPACK_IMPORTED_MODULE_5__","type","accept","onChange","e","target","files","placeholder","prefix","antd_es_icon__WEBPACK_IMPORTED_MODULE_7__","color","data","name","bitsUsed","transactions","USD","gridStyle","width","textAlign","boxShadow","gridStyleStatisc","background","border","statisticStyle","ContentBox","csv","react__WEBPACK_IMPORTED_MODULE_12___default","antd_es_card__WEBPACK_IMPORTED_MODULE_3__","paddingTop","Grid","antd_es_row__WEBPACK_IMPORTED_MODULE_5__","antd_es_col__WEBPACK_IMPORTED_MODULE_7__","antd_es_statistic__WEBPACK_IMPORTED_MODULE_9__","title","value","precision","valueStyle","antd_es_icon__WEBPACK_IMPORTED_MODULE_11__","suffix","antd_es_divider__WEBPACK_IMPORTED_MODULE_1__","_install_statistic__WEBPACK_IMPORTED_MODULE_13__","_bits_statistic__WEBPACK_IMPORTED_MODULE_14__","Header","Content","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleFileRead","fileReader","result","content","setState","csvJSON","file","load","onloadend","readAsText","FileReader","uploadCSV","lines","split","headers","i","length","obj","currentline","j","undefined","push","react_default","layout","href","icon","fontSize","marginTop","marginRight","components","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","install","uninstalls","activations","StatisticInstall","_PureComponent","_home_alberico_Documentos_Projetos_Twitch_Dashboard_twitch_extension_analyze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_alberico_Documentos_Projetos_Twitch_Dashboard_twitch_extension_analyze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_alberico_Documentos_Projetos_Twitch_Dashboard_twitch_extension_analyze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","_home_alberico_Documentos_Projetos_Twitch_Dashboard_twitch_extension_analyze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_home_alberico_Documentos_Projetos_Twitch_Dashboard_twitch_extension_analyze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","react__WEBPACK_IMPORTED_MODULE_5___default","recharts__WEBPACK_IMPORTED_MODULE_6__","aspect","strokeDasharray","dataKey","fill","PureComponent","StatisticBits","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","recharts__WEBPACK_IMPORTED_MODULE_1__","stroke","barSize"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,KAAAA,EAAAC,EAAAC,EAAA,oCAAAH,EAAA,QAAAI,EAAAH,EAAA,KAAAA,EAAAI,EAAAD,EAAA,eAAAH,EAAAC,EAAAC,EAAA,+BAAAC,EAAA,aAAAH,EAAA,QAAAK,EAAAL,EAAA,KAAAA,EAAAC,EAAAC,EAAA,+BAAAG,EAAA,IAAAL,EAAA,4JCUaM,EAAkB,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,iBAChC,OACEC,EAAAC,EAAAC,cAAAC,EAAA,GAAKC,OAAQ,GAAIC,MAAO,CAAEC,OAAQ,KAChCN,EAAAC,EAAAC,cAAAK,EAAA,GAAKC,KAAM,GACTR,EAAAC,EAAAC,cAAA,SAAOO,UAAU,SACfT,EAAAC,EAAAC,cAAA,QAAMO,UAAU,SAAhB,WACAT,EAAAC,EAAAC,cAAAQ,EAAA,GACEC,KAAK,OACLC,OAAO,OACPC,SAAU,SAACC,GAAD,OAAYf,EAAiBe,EAAEC,OAAOC,MAAM,KACtDC,YAAY,kBACZC,OAAQlB,EAAAC,EAAAC,cAAAiB,EAAA,GAAMR,KAAK,SAASN,MAAO,CAAEe,MAAO,yPCdlDC,EAA6B,CACjC,CACEC,KAAM,SACNC,SAAU,IACVC,aAAc,IACdC,IAAK,MAEP,CACEH,KAAM,SACNC,SAAU,IACVC,aAAc,IACdC,IAAK,MAEP,CACEH,KAAM,SACNC,SAAU,KACVC,aAAc,KACdC,IAAK,KAEP,CACEH,KAAM,SACNC,SAAU,KACVC,aAAc,KACdC,IAAK,MAEP,CACEH,KAAM,SACNC,SAAU,KACVC,aAAc,KACdC,IAAK,MAEP,CACEH,KAAM,SACNC,SAAU,KACVC,aAAc,IACdC,IAAK,OAGHC,EAA2B,CAC/BC,MAAO,MACPC,UAAW,SACXC,UACE,6FAEEC,EAAkC,CACtCH,MAAO,OACPC,UAAW,SACXG,WAAY,UACZC,OAAQ,gCACRH,UACE,6FAEEI,EAAgC,CACpCb,MAAO,WAKIc,EAAa,SAAApC,KAAGqC,IAAH,OACxBC,EAAAnC,EAAAC,cAAAmC,EAAA,GACEhC,MAAO,CACLC,OAAQ,GACRgC,WAAY,GACZP,WAAY,UACZC,OAAQ,gCACRH,UACE,0GAEJO,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOyB,GAChBM,EAAAnC,EAAAC,cAAAsC,EAAA,GAAKpC,OAAQ,IACXgC,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,GACT4B,EAAAnC,EAAAC,cAAAwC,EAAA,GACErC,MAAO4B,EACPU,MAAM,iCACNC,MAAO,MACPC,UAAW,EACXC,WAAY,CAAE1B,MAAO,WACrBF,OAAQkB,EAAAnC,EAAAC,cAAA6C,EAAA,GAAMpC,KAAK,cAIvByB,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,GACT4B,EAAAnC,EAAAC,cAAAwC,EAAA,GACErC,MAAO4B,EACPU,MAAM,+BACNC,MAAO,MACPC,UAAW,EACXC,WAAY,CAAE1B,MAAO,WACrBF,OAAQkB,EAAAnC,EAAAC,cAAA6C,EAAA,GAAMpC,KAAK,aAGvByB,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,GACT4B,EAAAnC,EAAAC,cAAAwC,EAAA,GACErC,MAAO4B,EACPU,MAAM,6BACNC,MAAO,MACPE,WAAY,CAAE1B,MAAO,WACrByB,UAAW,EACX3B,OAAQkB,EAAAnC,EAAAC,cAAA6C,EAAA,GAAMpC,KAAK,WAGvByB,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,GACT4B,EAAAnC,EAAAC,cAAAwC,EAAA,GACErC,MAAO4B,EACPU,MAAM,iCACNC,MAAO,MACPC,UAAW,EACXC,WAAY,CAAE1B,MAAO,WACrBF,OAAQkB,EAAAnC,EAAAC,cAAA6C,EAAA,GAAMpC,KAAK,eAK3ByB,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOqB,GAChBU,EAAAnC,EAAAC,cAAAsC,EAAA,GAAKpC,OAAQ,IACXgC,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,IACT4B,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOyB,GAChBM,EAAAnC,EAAAC,cAAAwC,EAAA,GACEC,MAAM,oBACNC,MAAO,OACPE,WAAY,CAAE1B,MAAO,WACrByB,UAAW,EACXxC,MAAO4B,MAIbG,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,IACT4B,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOyB,GAChBM,EAAAnC,EAAAC,cAAAwC,EAAA,GACEI,WAAY,CAAE1B,MAAO,WACrBuB,MAAM,mBACNC,MAAO,GACPI,OAAO,OACP3C,MAAO4B,MAKbG,EAAAnC,EAAAC,cAAA+C,EAAA,GAAS5C,MAAO,CAAE0B,WAAY,yBAC9BK,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,IACT4B,EAAAnC,EAAAC,cAACgD,EAAA,EAAD,SAINd,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOqB,GAChBU,EAAAnC,EAAAC,cAAAsC,EAAA,GAAKpC,OAAQ,IACXgC,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,IACT4B,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOyB,GAChBM,EAAAnC,EAAAC,cAAAwC,EAAA,GACEC,MAAM,qBACNC,MAAO,KACP1B,OAAQkB,EAAAnC,EAAAC,cAAA6C,EAAA,GAAMpC,KAAK,WACnBmC,WAAY,CAAE1B,MAAO,WACrBf,MAAO4B,MAIbG,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,IACT4B,EAAAnC,EAAAC,cAAAmC,EAAA,EAAME,KAAN,CAAWlC,MAAOyB,GAChBM,EAAAnC,EAAAC,cAAAwC,EAAA,GACEC,MAAM,2BACNC,MAAO,KACPE,WAAY,CAAE1B,MAAO,WACrBF,OAAQkB,EAAAnC,EAAAC,cAAA6C,EAAA,GAAMpC,KAAK,SACnBN,MAAO4B,MAIbG,EAAAnC,EAAAC,cAAA+C,EAAA,GAAS5C,MAAO,CAAE0B,WAAY,yBAC9BK,EAAAnC,EAAAC,cAAAuC,EAAA,GAAKjC,KAAM,IACT4B,EAAAnC,EAAAC,cAACiD,EAAA,EAAD,CAAe9B,KAAMA,4OCxKvB+B,aAAQC,cA0GDC,cA/Fb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAFRQ,WACwB,EAAAP,EA6BxBQ,eAAiB,WACf,GAA4C,kBAAjCR,EAAKO,MAAME,WAAWC,OAAqB,CACpD,IAAMC,EAAkBX,EAAKO,MAAME,WAAWC,OAC9CV,EAAKY,SAAS,CAAEjC,IAAKqB,EAAKa,QAAQF,IAAY,WACzB,OAAnBX,EAAKO,MAAM5B,KACPqB,EAAKY,SAAS,CAAE9C,KAAMkC,EAAKO,MAAM5B,IAAI,GAAG,wBAlC1BqB,EA8DxBzD,iBAAmB,SAACuE,GAClBd,EAAKY,SAAS,CAAEG,MAAM,GAAQ,WAC5Bf,EAAKO,MAAME,WAAWO,UAAYhB,EAAKQ,eACvCR,EAAKO,MAAME,WAAWQ,WAAWH,MA/DnCd,EAAKO,MAAQ,CACXE,WAAY,IAAIS,WAChBC,WAAW,EACXJ,MAAM,EACNpC,IAAK,KACLb,KAAM,kBAPckC,uEAUhBrB,GAON,IANA,IAAIyC,EAAQzC,EAAI0C,MAAM,MAElBX,EAAyC,GAEzCY,EAAUF,EAAM,GAAGC,MAAM,KAEpBE,EAAI,EAAGA,EAAIH,EAAMI,OAAS,EAAGD,IAAK,CAIzC,IAHA,IAAIE,EAAW,GACXC,EAAcN,EAAMG,GAAGF,MAAM,KAExBM,EAAI,EAAGA,EAAIL,EAAQE,OAAQG,SACXC,IAAnBF,EAAYC,IAAuC,KAAnBD,EAAYC,KAAWF,EAAIH,EAAQK,IAAMD,EAAYC,IAG3FjB,EAAOmB,KAAKJ,GAEd,OAAOf,mCA2CP,OACEoB,EAAArF,EAAAC,cAAAqF,EAAA,OACED,EAAArF,EAAAC,cAACkD,EAAD,CACE/C,MAAO,CACL0B,WAAY,YAEduD,EAAArF,EAAAC,cAAA,MAAIG,MAAO,CAAEe,MAAO,SAClBkE,EAAArF,EAAAC,cAAA,KAAGsF,KAAK,+BAA+BzE,OAAO,WAC5CuE,EAAArF,EAAAC,cAAAuF,EAAA,GACE9E,KAAK,SACLN,MAAO,CAAEe,MAAO,OAAQsE,SAAU,QAASC,UAAW,GAAIC,YAAa,OAJ7E,uBAOuBjC,KAAKI,MAAMzC,OAGpCgE,EAAArF,EAAAC,cAACmD,EAAD,KACEiC,EAAArF,EAAAC,cAAC2F,EAAA,gBAAD,CAAiB9F,iBAAkB4D,KAAK5D,mBACpB,OAAnB4D,KAAKI,MAAM5B,IAAemD,EAAArF,EAAAC,cAAC2F,EAAA,WAAD,CAAY1D,IAAKwB,KAAKI,MAAM5B,MAAU,6BA1FzD2D,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAArF,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,oJE/HbzF,EAAO,CACX,CACEC,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,MAEf,CACE3F,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,MAEf,CACE3F,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,MAEf,CACE3F,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,MAEf,CACE3F,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,MAEf,CACE3F,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,MAEf,CACE3F,KAAM,QACNyF,QAAS,IACTC,WAAY,KACZC,YAAa,OAIJC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAzD,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAuD,GAAAzD,OAAA4D,EAAA,EAAA5D,CAAAE,KAAAF,OAAA6D,EAAA,EAAA7D,CAAAyD,GAAAK,MAAA5D,KAAA6D,YAAA,OAAA/D,OAAAgE,EAAA,EAAAhE,CAAAyD,EAAAC,GAAA1D,OAAAiE,EAAA,EAAAjE,CAAAyD,EAAA,EAAAS,IAAA,SAAA/E,MAAA,WAEI,OACEgF,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAqBlG,MAAM,OAAOmG,OAAQ,GACxCF,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAUxG,KAAMA,GACduG,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAeE,gBAAgB,QAC/BH,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAOG,QAAQ,SACfJ,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,MACAD,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,MACAD,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,MACAD,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAKG,QAAQ,UAAUC,KAAK,UAAUlG,WAAY,CAAEkG,KAAM,UAC1DL,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAKG,QAAQ,aAAaC,KAAK,YAC/BL,EAAA3H,EAAAC,cAAC2H,EAAA,EAAD,CAAKG,QAAQ,cAAcC,KAAK,kBAZ1Cf,EAAA,CAAsCgB,kDCzDtC3I,EAAAC,EAAAC,EAAA,sBAAA0I,IAAA,IAAAC,EAAA7I,EAAA,GAAA8I,EAAA9I,EAAA+I,EAAAF,GAAAG,EAAAhJ,EAAA,IAmBa4I,EAAgB,SAAArI,GAAA,IAAGuB,EAAHvB,EAAGuB,KAAH,OAC3BgH,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAqB5G,MAAM,OAAOmG,OAAQ,GACxCO,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAelH,KAAMA,GACnBgH,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAeC,OAAO,YACtBH,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAOP,QAAQ,SACfK,EAAApI,EAAAC,cAACqI,EAAA,EAAD,MACAF,EAAApI,EAAAC,cAACqI,EAAA,EAAD,MACAF,EAAApI,EAAAC,cAACqI,EAAA,EAAD,MACAF,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAM5H,KAAK,WAAWqH,QAAQ,MAAMC,KAAK,UAAUO,OAAO,YAC1DH,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAKP,QAAQ,eAAeS,QAAS,GAAIR,KAAK,YAC9CI,EAAApI,EAAAC,cAACqI,EAAA,EAAD,CAAM5H,KAAK,WAAWqH,QAAQ,WAAWQ,OAAO","file":"static/js/main.913a77cc.chunk.js","sourcesContent":["export * from './upload-csv';\nexport * from './types';\nexport * from './install-statistic';\nexport * from './content';\nexport * from './bits-statistic';\n","import React from 'react';\nimport { Input, Icon, Statistic, Row, Col, Button } from 'antd';\nimport { ITwitchExtensionPrimitiveCSV, ITwitchExtensionRealCSV } from './types';\nconst sumBits = (arr: number[]): number => {\n  return arr.reduce((prev, next) => prev + next);\n};\n\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <Row gutter={16} style={{ margin: 10 }}>\n      <Col span={6}>\n        <label className='label'>\n          <span className='title'>Add CSV</span>\n          <Input\n            type='file'\n            accept='.csv'\n            onChange={(e: any) => handleFileChosen(e.target.files[0])}\n            placeholder='Click to Upload'\n            prefix={<Icon type='upload' style={{ color: 'rgba(0,0,0,.25)' }} />}\n          />\n        </label>\n      </Col>\n    </Row>\n  );\n};\n//   <Col span={12}>\n//     <Statistic title='Active Users' value={112893} />\n//   </Col>\n//   <Col span={12}>\n//     <Statistic title='Bits Revenue Balance (USD)' value={112893} precision={2} />\n//     <Statistic title='Bits Used (QTd)' value={112893} precision={2} />\n//     <Statistic title='Bits Transactions (Bits)' value={112893} precision={2} />\n//     <Statistic title='Bits Revenue Balance (USD)' value={112893} precision={2} />\n//   </Col>\n","import React, { CSSProperties } from 'react';\nimport { Card, Statistic, Row, Col, Divider, Icon } from 'antd';\nimport { StatisticInstall } from './install-statistic';\nimport { ImportTwitchCSV } from './upload-csv';\nimport { StatisticBits } from './bits-statistic';\nimport { IDataBitsStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\nconst data: IDataBitsStatistic[] = [\n  {\n    name: 'Page A',\n    bitsUsed: 590,\n    transactions: 800,\n    USD: 1400\n  },\n  {\n    name: 'Page B',\n    bitsUsed: 868,\n    transactions: 967,\n    USD: 1506\n  },\n  {\n    name: 'Page C',\n    bitsUsed: 1397,\n    transactions: 1098,\n    USD: 989\n  },\n  {\n    name: 'Page D',\n    bitsUsed: 1480,\n    transactions: 1200,\n    USD: 1228\n  },\n  {\n    name: 'Page E',\n    bitsUsed: 1520,\n    transactions: 1108,\n    USD: 1100\n  },\n  {\n    name: 'Page F',\n    bitsUsed: 1400,\n    transactions: 680,\n    USD: 1700\n  }\n];\nconst gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nconst gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: '#19171c',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nconst statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\nexport const ContentBox = ({ csv }: IProps): JSX.Element => (\n  <Card\n    style={{\n      margin: 16,\n      paddingTop: 10,\n      background: '#0f0e11',\n      border: '1px solid hsla(0,0%,100%,.09)',\n      boxShadow:\n        '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n    }}>\n    <Card.Grid style={gridStyleStatisc}>\n      <Row gutter={16}>\n        <Col span={6}>\n          <Statistic\n            style={statisticStyle}\n            title='Unique Interactors Last 7 Days'\n            value={11.28}\n            precision={2}\n            valueStyle={{ color: '#b19dd8' }}\n            prefix={<Icon type='select' />}\n          />\n        </Col>\n\n        <Col span={6}>\n          <Statistic\n            style={statisticStyle}\n            title='Unique Renderers Last 7 Days'\n            value={11.28}\n            precision={0}\n            valueStyle={{ color: '#b19dd8' }}\n            prefix={<Icon type='stock' />}\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            style={statisticStyle}\n            title='Unique Viewers Last 7 Days'\n            value={11.28}\n            valueStyle={{ color: '#b19dd8' }}\n            precision={0}\n            prefix={<Icon type='eye' />}\n          />\n        </Col>\n        <Col span={6}>\n          <Statistic\n            style={statisticStyle}\n            title='Unique Mouseenters Last 7 Days'\n            value={11.28}\n            precision={0}\n            valueStyle={{ color: '#b19dd8' }}\n            prefix={<Icon type='heart' />}\n          />\n        </Col>\n      </Row>\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Card.Grid style={gridStyleStatisc}>\n            <Statistic\n              title='Activations (AVG)'\n              value={112893}\n              valueStyle={{ color: '#b19dd8' }}\n              precision={2}\n              style={statisticStyle}\n            />\n          </Card.Grid>\n        </Col>\n        <Col span={12}>\n          <Card.Grid style={gridStyleStatisc}>\n            <Statistic\n              valueStyle={{ color: '#b19dd8' }}\n              title='Uninstalls (AVG)'\n              value={10}\n              suffix='/ 20'\n              style={statisticStyle}\n            />\n          </Card.Grid>\n        </Col>\n\n        <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n        <Col span={24}>\n          <StatisticInstall />\n        </Col>\n      </Row>\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <Row gutter={16}>\n        <Col span={12}>\n          <Card.Grid style={gridStyleStatisc}>\n            <Statistic\n              title='Bits Revenue (USD)'\n              value={1128}\n              prefix={<Icon type='dollar' />}\n              valueStyle={{ color: '#b19dd8' }}\n              style={statisticStyle}\n            />\n          </Card.Grid>\n        </Col>\n        <Col span={12}>\n          <Card.Grid style={gridStyleStatisc}>\n            <Statistic\n              title='Bits Transactions (BITS)'\n              value={1128}\n              valueStyle={{ color: '#b19dd8' }}\n              prefix={<Icon type='like' />}\n              style={statisticStyle}\n            />\n          </Card.Grid>\n        </Col>\n        <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n        <Col span={24}>\n          <StatisticBits data={data} />\n        </Col>\n      </Row>\n    </Card.Grid>\n  </Card>\n);\n","import React, { Component } from 'react';\nimport {\n  ImportTwitchCSV,\n  StatisticInstall,\n  ContentBox,\n  ITwitchExtensionPrimitiveCSV\n} from './components/index';\nimport { Layout, Icon } from 'antd';\n\nconst { Header, Content } = Layout;\n\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name'\n    };\n  }\n  csvJSON(csv: string): ITwitchExtensionPrimitiveCSV[] {\n    let lines = csv.split('\\n');\n\n    let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n    let headers = lines[0].split(',');\n\n    for (let i = 1; i < lines.length - 1; i++) {\n      let obj: any = {};\n      let currentline = lines[i].split(',');\n\n      for (let j = 0; j < headers.length; j++) {\n        if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n    }\n    return result;\n  }\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: this.csvJSON(content) }, () => {\n        this.state.csv !== null\n          ? this.setState({ name: this.state.csv[0]['Extension Name'] })\n          : null;\n      });\n      // const total = data\n      //   .map(item => parseFloat(item['Bits Revenue USD']))\n      //   .reduce((prev, next) => prev + next);\n      // const install = data\n      //   .map(item => parseFloat(item.Installs))\n      //   .reduce((prev, next) => prev + next);\n      // const desinstall = data\n      //   .map(item => parseFloat(item.Uninstalls))\n      //   .reduce((prev, next) => prev + next);\n\n      // const ac = data\n      //   .map(item => parseFloat(item['Unique Active Channels']))\n      //   .reduce((prev, next) => prev + next);\n\n      // const at = data.map(item => parseFloat(item.Activations)).reduce((prev, next) => prev + next);\n\n      // console.log('Total => ', total);\n      // console.log('Install => ', install);\n      // console.log('Unistall => ', desinstall);\n      // console.log('AVG Instalation => ', install - desinstall);\n      // console.log('Unique Active Channels => ', ac);\n      // console.log('Activations => ', at);\n    }\n  };\n\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Header\n          style={{\n            background: '#6441a4'\n          }}>\n          <h1 style={{ color: '#fff' }}>\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              <Icon\n                type='github'\n                style={{ color: '#fff', fontSize: '1.5em', marginTop: 10, marginRight: 20 }}\n              />\n            </a>\n            Extension Overview: {this.state.name}\n          </h1>\n        </Header>\n        <Content>\n          <ImportTwitchCSV handleFileChosen={this.handleFileChosen} />\n          {this.state.csv !== null ? <ContentBox csv={this.state.csv} /> : 'Please Upload CSV'}\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { PureComponent } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nconst data = [\n  {\n    name: 'Dia 1',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  },\n  {\n    name: 'Dia 2',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  },\n  {\n    name: 'Dia 3',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  },\n  {\n    name: 'Dia 4',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  },\n  {\n    name: 'Dia 5',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  },\n  {\n    name: 'Dia 6',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  },\n  {\n    name: 'Dia 7',\n    install: 4000,\n    uninstalls: 2400,\n    activations: 2400\n  }\n];\n\nexport class StatisticInstall extends PureComponent {\n  render() {\n    return (\n      <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n        <BarChart data={data}>\n          <CartesianGrid strokeDasharray='3 3' />\n          <XAxis dataKey='name' />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey='install' fill='#6441a4' background={{ fill: '#eee' }} />\n          <Bar dataKey='uninstalls' fill='#392e5c' />\n          <Bar dataKey='activations' fill='#9a7fcc' />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nimport { IDataBitsStatistic } from './types';\n\ninterface IProps {\n  data: IDataBitsStatistic[];\n}\nexport const StatisticBits = ({ data }: IProps) => (\n  <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n    <ComposedChart data={data}>\n      <CartesianGrid stroke='#f5f5f5' />\n      <XAxis dataKey='name' />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n      <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n      <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n    </ComposedChart>\n  </ResponsiveContainer>\n);\n"],"sourceRoot":""}