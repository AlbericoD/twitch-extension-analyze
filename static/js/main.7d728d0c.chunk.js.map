{"version":3,"sources":["components/upload-csv.tsx","components/style.tsx","components/menu/sider.tsx","components/menu/top.tsx","components/svg/bits-svg.tsx","components/statistics-panel/statistics-panel-bits.tsx","components/statistics-panel/statistics-panel-install.tsx","components/statistics-panel/statistics-panel-iteration.tsx","components/statistics-panel/statistics-top-panel.tsx","components/graphs/bits-statistic-graph.tsx","components/graphs/install-statistic-graph.tsx","components/graphs/statistics-panel-iteration-graph.tsx","containers/monetization-graph.tsx","containers/installations-graph.tsx","containers/overview.tsx","containers/interation-graph.tsx","containers/content.tsx","utils/csv-to-json.ts","App.tsx","utils/make-ranges.ts","serviceWorker.ts","index.tsx","components/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","ImportTwitchCSV","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref","handleFileChosen","a","createElement","className","type","accept","onChange","e","target","files","placeholder","cardBody","gridStyle","gridStyleStatisc","statisticStyle","graphCardStyle","margin","paddingTop","border","boxShadow","width","textAlign","background","color","options","key","icon","name","Sider","collapsed","handleClick","onCollapse","loadedCsv","current","react_default","layout","collapsible","breakpoint","style","href","fontSize","es_menu","theme","mode","defaultSelectedKeys","selectedKeys","onClick","map","option","Item","disabled","Top","children","lineHeight","page_header","title","subTitle","bitsSVG","height","version","viewBox","x","y","fillRule","StatisticsPanelBits","cardCss","statisticCss","csv","row","gutter","col","span","card","Grid","statistic","value","item","parseFloat","reduce","prev","next","prefix","precision","valueStyle","parseInt","component","divider","StatisticsPanelInstall","Uninstalls","suffix","concat","Installs","Activations","StatisticsPanelIteration","Clicks","Minimizations","Unminimizations","statisticsPanel","StatisticsTopPanel","css","index","StatisticBitsGraph","data","react","es6","aspect","stroke","dataKey","fill","barSize","StatisticInstallGraph","strokeDasharray","StatisticIteractionGraph","syncId","MonetizationGraphBox","props","_useState","useState","bits","_useState2","Object","slicedToArray","setState","useEffect","initialDateIndex","lastDateIndex","bitsData","csvData","filter","Date","USD","bitsUsed","transactions","push","reverse","makeData","padding","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph_StatisticBitsGraph","InstallationsGraphBox","installs","installsData","install","activations","uninstalls","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph_StatisticInstallGraph","OverViewBox","statistics_top_panel_StatisticsTopPanel","installations_graph_InstallationsGraphBox","monetization_graph_MonetizationGraphBox","InterationGraphBox","iteraction","iteractionData","interactionRate","minimizations","unminimizations","statistics_panel_iteration_StatisticsPanelIteration","statistics_panel_iteration_graph_StatisticIteractionGraph","ContentBox","menu","empty","description","components","overview_OverViewBox","interation_graph_InterationGraphBox","panels","csvToJSON","lines","split","headers","result","i","length","obj","currentline","j","undefined","Header","Content","Footer","RangePicker","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","ms","arguments","setTimeout","load","handleFileRead","fileReader","content","toggle","bind","file","onloadend","readAsText","parseDateToIndex","dates","forEach","date","ind","findIndex","format","FileReader","uploadCSV","_this2","_this$state","minHeight","sider_Sider","marginBottom","position","zIndex","top_Top","defaultValue","moment","ranges","First Extension Release - Last Date CSV","Last 7 Days","Last 30 Days","size","marginTop","spin","tip","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_style__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_upload_csv__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"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","file":"static/js/main.7d728d0c.chunk.js","sourcesContent":["import React from 'react';\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <label className='label'>\n      <input\n        type='file'\n        accept='.csv'\n        onChange={(e: any) => handleFileChosen(e.target.files[0])}\n        placeholder='Click to Upload'\n      />\n    </label>\n  );\n};\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  // background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: 'rgb(25, 23, 28)',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\nexport const graphCardStyle: CSSProperties = {\n  margin: 1,\n  paddingTop: 1,\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n","import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\n\ninterface IProps {\n  collapsed: boolean;\n  handleClick: (event: any) => void;\n  onCollapse: (event: any) => void;\n  loadedCsv: boolean;\n  current: string;\n}\ninterface IOptions {\n  key: string;\n  icon: string;\n  name: string;\n}\nconst options: IOptions[] = [\n  {\n    key: 'upload-csv',\n    icon: 'upload',\n    name: 'Upload CSV'\n  },\n  {\n    key: 'overview',\n    icon: 'dashboard',\n    name: 'Overview'\n  },\n  {\n    key: 'installations',\n    icon: 'bar-chart',\n    name: 'Installations Graph '\n  },\n  {\n    key: 'monetization',\n    icon: 'line-chart',\n    name: 'Monetization Graph'\n  },\n  {\n    key: 'iteraction',\n    icon: 'area-chart',\n    name: 'Iteration Graph'\n  }\n];\n\nexport const Sider = ({\n  collapsed,\n  handleClick,\n  onCollapse,\n  loadedCsv,\n  current\n}: IProps): JSX.Element => (\n  <Layout.Sider\n    collapsible\n    collapsed={collapsed}\n    onCollapse={onCollapse}\n    breakpoint='sm'\n    style={{\n      background: '#0f0e11',\n      border: '1px solid hsla(0,0%,100%,.09)',\n      boxShadow:\n        '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n    }}>\n    <div className='logo'>\n      <a href='https://github.com/AlbericoD/twitch-extension-analyze' target='__blank'>\n        <Icon type='github' style={{ color: '#fff', fontSize: '1.5em', margin: '5px 6px' }} />\n      </a>\n    </div>\n    <Menu\n      theme='dark'\n      mode='inline'\n      defaultSelectedKeys={['upload-csv']}\n      selectedKeys={[current]}\n      onClick={handleClick}>\n      {options.map(option => (\n        <Menu.Item key={option.key} disabled={loadedCsv}>\n          <Icon type={option.icon} />\n          <span>{option.name}</span>\n        </Menu.Item>\n      ))}\n    </Menu>\n  </Layout.Sider>\n);\n","import React, { ReactNode } from 'react';\nimport { Menu, PageHeader } from 'antd';\n\ninterface IProps {\n  name: string;\n  children: ReactNode;\n}\nexport const Top = ({ name, children }: IProps): JSX.Element => (\n  <Menu theme='light' mode='horizontal' defaultSelectedKeys={['2']} style={{ lineHeight: '64px' }}>\n    <Menu.Item key='0'>\n      <PageHeader title='Extension: ' subTitle={name} />\n    </Menu.Item>\n    <Menu.Item key='2'>{children}</Menu.Item>\n  </Menu>\n);\n","import React, { ReactElement } from 'react';\n\nexport const bitsSVG = (): ReactElement<SVGAElement> => (\n  <svg\n    className='bits-icon__svg'\n    width='1em'\n    height='1em'\n    version='1.1'\n    viewBox='0 0 20 20'\n    x='0px'\n    y='0px'>\n    <path\n      d='M9.592 9.081L3 11.802l6.122-9.336A1.05 1.05 0 0 1 10 2c.357 0 .688.176.878.466L17 11.802l-6.592-2.72a1.077 1.077 0 0 0-.816 0zM10 11l6 2.638-5.407 4.16a.973.973 0 0 1-1.186 0L4 13.638 10 11z'\n      fillRule='evenodd'\n    />\n  </svg>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\nimport { bitsSVG } from '../svg/index';\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\n\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon component={bitsSVG} />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    {/* if >= 0 icon = meh: simle */}\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Transactions '\n          value={csv\n            .map(item => parseInt(item['Bits Transactions']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Details Page Visits'\n          value={csv\n            .map(item => parseInt(item['Extension Details Page Visits']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls / Installs'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelIteration = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Interaction Rate'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item['Interaction Rate']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={4}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Clicks'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Clicks))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Minimizations'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Minimizations))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Unminimizations'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Unminimizations))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import React, { Fragment } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush\n} from 'recharts';\n\nimport { IDataBitsStatistic } from '../types';\n\ninterface IProps {\n  data: IDataBitsStatistic[];\n}\nexport const StatisticBitsGraph = ({ data }: IProps) => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <ComposedChart data={data}>\n        <Brush />\n        <CartesianGrid stroke='#f5f5f5' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n        <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n        <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n      </ComposedChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { Fragment } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush\n} from 'recharts';\nimport { IDataInstalls } from '../types';\n\ninterface IProps {\n  data: IDataInstalls[];\n}\nexport const StatisticInstallGraph = ({ data }: IProps): JSX.Element => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <BarChart data={data}>\n        <Brush />\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='install' fill='#6441a4' />\n        <Bar dataKey='uninstalls' fill='#392e5c' />\n        <Bar dataKey='activations' fill='#9a7fcc' />\n      </BarChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { Fragment } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Brush,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  ComposedChart,\n  Bar\n} from 'recharts';\nimport { IIteraction } from '../types';\nimport { Row, Col } from 'antd';\n\ninterface IProps {\n  data: IIteraction[];\n}\nexport const StatisticIteractionGraph = ({ data }: IProps): JSX.Element => {\n  return (\n    <Fragment>\n      <Row gutter={16}>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <LineChart data={data} syncId='anyId'>\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Line type='monotone' dataKey='interactionRate' stroke='#8884d8' fill='#392e5c' />\n            </LineChart>\n          </ResponsiveContainer>\n        </Col>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <AreaChart data={data} syncId='anyId'>\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Area type='monotone' dataKey='minimizations' stroke='#6441a4' fill='#9a7fcc' />\n            </AreaChart>\n          </ResponsiveContainer>\n        </Col>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <LineChart data={data} syncId='anyId'>\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Line type='monotone' dataKey='unminimizations' stroke='#9a7fcc' fill='#6441a4' />\n              <Brush />\n            </LineChart>\n          </ResponsiveContainer>\n        </Col>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <ComposedChart data={data}>\n              <CartesianGrid stroke='#f5f5f5' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Area type='monotone' dataKey='unminimizations' fill='#6441a4' stroke='#8884d8' />\n              <Bar dataKey='interactionRate' barSize={20} fill='#392e5c' />\n              <Line type='monotone' dataKey='minimizations' stroke='#9a7fcc' />\n              <Brush />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n","import React, { CSSProperties, FunctionComponent, useState, useEffect } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelBits } from '../components/statistics-panel';\nimport { StatisticBitsGraph } from '../components/graphs';\nimport { ITwitchExtensionPrimitiveCSV, IDataBitsStatistic } from '../components/types';\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\ninterface IContainerData {\n  bits: IDataBitsStatistic[];\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IContainerData => {\n  let bitsData: IDataBitsStatistic[] = [];\n  let csvData: ITwitchExtensionPrimitiveCSV[] = [];\n\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      bitsData.push(bits);\n      csvData.push(item);\n    }\n  });\n  bitsData.reverse();\n  csvData.reverse();\n  return {\n    csv: csvData,\n    bits: bitsData\n  };\n};\n\nexport const MonetizationGraphBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IContainerData>({ csv: [], bits: [] });\n  useEffect(() => {\n    setState(makeData(props.csv, props.initialDateIndex, props.lastDateIndex));\n  }, [props.csv, props.initialDateIndex, props.lastDateIndex]);\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelBits\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          csv={data.csv}>\n          <StatisticBitsGraph data={data.bits} />\n        </StatisticsPanelBits>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import React, { CSSProperties, FunctionComponent, useState, useEffect } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelInstall } from '../components/statistics-panel';\nimport { StatisticInstallGraph } from '../components/graphs/install-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from '../components';\n\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\ninterface IContainerData {\n  installs: IDataInstalls[];\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IContainerData => {\n  let installsData: IDataInstalls[] = [];\n  let csvData: ITwitchExtensionPrimitiveCSV[] = [];\n\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      installsData.push(install);\n      csvData.push(item);\n    }\n  });\n  installsData.reverse();\n  csvData.reverse();\n  return {\n    csv: csvData,\n    installs: installsData\n  };\n};\n\nexport const InstallationsGraphBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IContainerData>({ csv: [], installs: [] });\n  useEffect(() => {\n    setState(makeData(props.csv, props.initialDateIndex, props.lastDateIndex));\n  }, [props.csv, props.initialDateIndex, props.lastDateIndex]);\n\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelInstall\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          csv={data.csv}>\n          <StatisticInstallGraph data={data.installs} />\n        </StatisticsPanelInstall>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsTopPanel } from '../components/statistics-panel';\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\nimport { graphCardStyle } from '../components';\n\nimport { MonetizationGraphBox } from './monetization-graph';\nimport { InstallationsGraphBox } from './installations-graph';\ninterface IProps {\n  cardBody: CSSProperties;\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  gridStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const OverViewBox = ({\n  cardBody,\n  gridStyleStatisc,\n  statisticStyle,\n  gridStyle,\n  csv,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Card style={cardBody}>\n    <Card.Grid style={gridStyleStatisc}>\n      <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n    </Card.Grid>\n\n    <Card.Grid style={gridStyle}>\n      <InstallationsGraphBox\n        csv={csv}\n        graphCardStyle={graphCardStyle}\n        gridStyleStatisc={gridStyleStatisc}\n        statisticStyle={statisticStyle}\n        initialDateIndex={initialDateIndex}\n        lastDateIndex={lastDateIndex}\n      />\n    </Card.Grid>\n\n    <Card.Grid style={gridStyle}>\n      <MonetizationGraphBox\n        csv={csv}\n        graphCardStyle={graphCardStyle}\n        gridStyleStatisc={gridStyleStatisc}\n        statisticStyle={statisticStyle}\n        initialDateIndex={initialDateIndex}\n        lastDateIndex={lastDateIndex}\n      />\n    </Card.Grid>\n  </Card>\n);\n","import React, { CSSProperties, FunctionComponent, useEffect, useState } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelIteration } from '../components/statistics-panel';\nimport { ITwitchExtensionPrimitiveCSV, IIteraction } from '../components';\nimport { StatisticIteractionGraph } from '../components/graphs';\n\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\ninterface IContainerData {\n  iteraction: IIteraction[];\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IContainerData => {\n  let iteractionData: IIteraction[] = [];\n  let csvData: ITwitchExtensionPrimitiveCSV[] = [];\n\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IIteraction = {\n        name: item.Date,\n        interactionRate: parseFloat(item['Interaction Rate']),\n        minimizations: parseFloat(item['Minimization Rate']),\n        unminimizations: parseFloat(item['Unminimization Rate'])\n      };\n      iteractionData.push(install);\n      csvData.push(item);\n    }\n  });\n  iteractionData.reverse();\n  csvData.reverse();\n  return {\n    csv: csvData,\n    iteraction: iteractionData\n  };\n};\nexport const InterationGraphBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IContainerData>({ csv: [], iteraction: [] });\n  useEffect(() => {\n    setState(makeData(props.csv, props.initialDateIndex, props.lastDateIndex));\n  }, [props.csv, props.initialDateIndex, props.lastDateIndex]);\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelIteration\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          csv={data.csv}>\n          <StatisticIteractionGraph data={data.iteraction} />\n        </StatisticsPanelIteration>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import React from 'react';\n\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\nimport {\n  cardBody,\n  statisticStyle,\n  gridStyle,\n  graphCardStyle,\n  gridStyleStatisc\n} from '../components/style';\n\nimport { OverViewBox } from './overview';\nimport { InstallationsGraphBox } from './installations-graph';\nimport { MonetizationGraphBox } from './monetization-graph';\nimport { InterationGraphBox } from './interation-graph';\nimport { Empty, PageHeader } from 'antd';\nimport { ImportTwitchCSV } from '../components';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n  menu: string;\n  handleFileChosen: (file: any) => void;\n}\nconst panels = ({\n  csv,\n  initialDateIndex,\n  lastDateIndex,\n  menu,\n  handleFileChosen\n}: IProps): JSX.Element => {\n  switch (menu) {\n    case 'upload-csv':\n      return (\n        <Empty\n          style={{ height: '75vh', margin: 20, padding: 30 }}\n          description={\n            <span>\n              Please click the button to import your CSV file <b>( V2+ )</b>\n            </span>\n          }>\n          <PageHeader\n            title='CSV File'\n            subTitle={<ImportTwitchCSV handleFileChosen={handleFileChosen} />}\n          />\n        </Empty>\n      );\n    case 'overview':\n      return (\n        <OverViewBox\n          cardBody={cardBody}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          gridStyle={gridStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n    case 'installations':\n      return (\n        <InstallationsGraphBox\n          graphCardStyle={graphCardStyle}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n    case 'monetization':\n      return (\n        <MonetizationGraphBox\n          graphCardStyle={graphCardStyle}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n    case 'iteraction':\n      return (\n        <InterationGraphBox\n          graphCardStyle={graphCardStyle}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n\n    default:\n      return (\n        <Empty\n          style={{ height: '75vh', margin: 20, padding: 30 }}\n          description={<span>OPSSSS, strange you show up here</span>}\n        />\n      );\n  }\n};\nexport const ContentBox = (props: IProps): JSX.Element => panels(props);\n","import { ITwitchExtensionPrimitiveCSV } from '../components';\n\nexport const csvToJSON = (csv: string): ITwitchExtensionPrimitiveCSV[] => {\n  const lines = csv.split('\\n');\n  const headers = lines[0].split(',');\n  let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n  for (let i = 1; i < lines.length - 1; i++) {\n    let obj: any = {};\n    let currentline = lines[i].split(',');\n    for (let j = 0; j < headers.length; j++) {\n      if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n    }\n    result.push(obj);\n  }\n  return result;\n};\n","import React, { Component } from 'react';\nimport { Layout, DatePicker, Row, Col, PageHeader, Spin } from 'antd';\nimport moment, { Moment } from 'moment';\n\nimport { ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Sider, Top } from './components/menu';\nimport { ContentBox } from './containers';\nimport { makeRanges, csvToJSON } from './utils';\n\nconst { Header, Content, Footer } = Layout;\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\n\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n  initialDateIndex: number;\n  lastDateIndex: number;\n  collapsed: boolean;\n  menu: string;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name',\n      initialDateIndex: 0,\n      lastDateIndex: 0,\n      collapsed: false,\n      menu: 'upload-csv'\n    };\n  }\n  delay = (ms: number = 0, menu: string = this.state.menu): NodeJS.Timeout =>\n    setTimeout(() => {\n      this.setState({ load: false, menu });\n    }, ms);\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: csvToJSON(content) }, () => {\n        setTimeout(\n          () => {\n            if (this.state.csv !== null) {\n              this.setState(\n                {\n                  name: this.state.csv[0]['Extension Name'],\n                  initialDateIndex: this.state.csv.length - 1,\n                  lastDateIndex: 0\n                },\n                () => this.setState({ load: false, menu: 'overview' })\n              );\n            }\n          },\n          this.state.csv !== null ? this.state.csv.length * 2 : 2\n        );\n      });\n    }\n  };\n\n  toggle = () => {\n    this.setState(\n      {\n        collapsed: !this.state.collapsed,\n        load: true\n      },\n      this.delay.bind(0.2)\n    );\n  };\n  handleClick = (e: any) => {\n    this.setState(\n      { menu: e.key, load: true },\n      this.delay.bind(this.state.csv !== null ? this.state.csv.length : 0.2)\n    );\n  };\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n\n  parseDateToIndex = (dates: Moment[]) => {\n    const { csv } = this.state;\n    if (csv !== null && dates.length === 2) {\n      dates.forEach((date, ind) => {\n        const index = csv.findIndex(item => item.Date === date.format('YYYY-MM-DD'));\n        if (index !== -1 && ind === 0) this.setState({ initialDateIndex: index });\n        if (index !== -1 && ind === 1) this.setState({ lastDateIndex: index });\n      });\n    }\n  };\n  render() {\n    const { csv, initialDateIndex, lastDateIndex, menu, load } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider\n          current={this.state.menu}\n          collapsed={this.state.collapsed}\n          handleClick={this.handleClick}\n          onCollapse={this.toggle}\n          loadedCsv={this.state.csv === null}\n        />\n        <Layout style={{ padding: '0 0 24px', marginBottom: 20 }}>\n          <Header style={{ position: 'fixed', zIndex: 2, width: '100%' }}>\n            <Top name={this.state.name}>\n              {csv !== null ? (\n                <PageHeader\n                  title='Graph Range Date'\n                  subTitle={\n                    <RangePicker\n                      defaultValue={[\n                        moment(csv[csv.length - 1].Date, dateFormat),\n                        moment(csv[0].Date, dateFormat)\n                      ]}\n                      ranges={makeRanges(csv)}\n                      format={dateFormat}\n                      size={'large'}\n                      onChange={(e: any) => this.parseDateToIndex(e)}\n                      disabled={csv === null}\n                    />\n                  }\n                />\n              ) : (\n                'Graph Range Date'\n              )}\n            </Top>\n          </Header>\n          <Content style={{ width: '100%', minHeight: '70vh', marginTop: 60 }}>\n            <Row gutter={16}>\n              <Col span={24}>\n                {!load ? (\n                  <ContentBox\n                    menu={menu}\n                    initialDateIndex={initialDateIndex}\n                    lastDateIndex={lastDateIndex}\n                    handleFileChosen={this.handleFileChosen}\n                    csv={csv !== null ? csv : []}\n                  />\n                ) : (\n                  <div className='load-csv'>\n                    <Spin tip='loading ...' />\n                  </div>\n                )}\n              </Col>\n            </Row>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Extension Analyze ©2019 Created by&nbsp;&nbsp;\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              Albérico Dias Barreto Filho\n            </a>\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import { ITwitchExtensionPrimitiveCSV } from '../components';\nimport { RangePickerPresetRange } from 'antd/lib/date-picker/interface';\nimport moment from 'moment';\n\nconst dateFormat = 'YYYY/MM/DD';\n\ninterface IRange {\n  [range: string]: RangePickerPresetRange;\n}\nexport const makeRanges = (data: ITwitchExtensionPrimitiveCSV[]): IRange => {\n  if (data.length >= 0 && data.length <= 6) {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  } else if (data.length >= 0 && data.length >= 29) {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)],\n      'Last 30 Days': [moment(data[29].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  } else {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ]\n    };\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export * from './style';\nexport * from './types';\nexport * from './upload-csv';\n"],"sourceRoot":""}