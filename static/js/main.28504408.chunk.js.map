{"version":3,"sources":["components/index.tsx","components/upload-csv.tsx","components/statistics-top-panel.tsx","components/statistics-panel-install.tsx","components/statistics-panel-bits.tsx","components/style.tsx","components/content.tsx","App.tsx","serviceWorker.ts","index.tsx","components/install-statistic-graph.tsx","components/bits-statistic-graph.tsx"],"names":["_upload_csv__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_content__WEBPACK_IMPORTED_MODULE_3__","ImportTwitchCSV","_ref","handleFileChosen","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","antd_es_input__WEBPACK_IMPORTED_MODULE_1__","type","accept","onChange","e","target","files","placeholder","statisticsPanel","title","precision","icon","StatisticsTopPanel","css","value","react_default","row","gutter","map","item","index","col","span","key","statistic","style","valueStyle","color","prefix","StatisticsPanelInstall","cardCss","statisticCss","csv","children","card","Grid","parseInt","Activations","reduce","prev","next","Uninstalls","suffix","concat","Installs","divider","background","StatisticsPanelBits","parseFloat","cardBody","margin","paddingTop","border","boxShadow","gridStyle","width","textAlign","gridStyleStatisc","statisticStyle","graphCardStyle","ContentBox","props","initialDateIndex","lastDateIndex","menu","padding","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph","data","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph","statistics_top_panel_StatisticsTopPanel","panels","Sider","Header","Content","Footer","RangePicker","dateFormat","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleFileRead","fileReader","result","content","setState","csvJSON","name","length","toggle","collapsed","handleClick","console","log","file","load","onloadend","readAsText","makeRanges","First Extension Release - Last Date CSV","moment","Date","Last 7 Days","Last 30 Days","parseDateToIndex","dates","forEach","date","ind","findIndex","format","FileReader","uploadCSV","lines","split","headers","i","obj","currentline","j","undefined","push","_this2","_this$state","layout","trigger","collapsible","breakpoint","href","fontSize","es_menu","theme","mode","defaultSelectedKeys","onClick","Item","lineHeight","page_header","subTitle","defaultValue","ranges","size","disabled","components","empty","height","description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","StatisticInstallGraph","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","recharts__WEBPACK_IMPORTED_MODULE_1__","makeData","filter","install","activations","uninstalls","reverse","aspect","strokeDasharray","dataKey","fill","StatisticBitsGraph","bits","USD","bitsUsed","transactions","stroke","barSize"],"mappings":"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","file":"static/js/main.28504408.chunk.js","sourcesContent":["export * from './upload-csv';\nexport * from './types';\nexport * from './install-statistic-graph';\nexport * from './content';\nexport * from './bits-statistic-graph';\n","import React from 'react';\nimport { Input, Icon } from 'antd';\n\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <label className='label'>\n      <Input\n        type='file'\n        accept='.csv'\n        onChange={(e: any) => handleFileChosen(e.target.files[0])}\n        placeholder='Click to Upload'\n      />\n    </label>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations (Total)'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls (Total)'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used (BITS)'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={2}\n          prefix={<Icon type='like' />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: '#19171c',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\nexport const graphCardStyle: CSSProperties = {\n  margin: 1,\n  paddingTop: 1,\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n","import React from 'react';\nimport { Card, Button } from 'antd';\nimport { StatisticsTopPanel } from './statistics-top-panel';\nimport { StatisticsPanelInstall } from './statistics-panel-install';\nimport { StatisticsPanelBits } from './statistics-panel-bits';\nimport { StatisticInstallGraph } from './install-statistic-graph';\nimport { StatisticBitsGraph } from './bits-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\nimport { cardBody, statisticStyle, gridStyle, gridStyleStatisc, graphCardStyle } from './style';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n  menu: string;\n}\nconst panels = ({ csv, initialDateIndex, lastDateIndex, menu }: IProps): JSX.Element => {\n  switch (menu) {\n    case '2':\n      return (\n        <Card style={graphCardStyle}>\n          <Card.Grid style={{ width: '100%', padding: 3 }}>\n            <StatisticsPanelInstall\n              cardCss={gridStyleStatisc}\n              statisticCss={statisticStyle}\n              csv={csv}>\n              <StatisticInstallGraph\n                data={csv}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n              />\n            </StatisticsPanelInstall>\n          </Card.Grid>\n        </Card>\n      );\n    case '3':\n      return (\n        <Card style={graphCardStyle}>\n          <Card.Grid style={{ width: '100%', padding: 3 }}>\n            <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n              <StatisticBitsGraph\n                data={csv}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n              />\n            </StatisticsPanelBits>\n          </Card.Grid>\n        </Card>\n      );\n    default:\n      return (\n        <Card style={cardBody}>\n          <Card.Grid style={gridStyleStatisc}>\n            <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n          </Card.Grid>\n          <Card.Grid style={gridStyle}>\n            <StatisticsPanelInstall\n              cardCss={gridStyleStatisc}\n              statisticCss={statisticStyle}\n              csv={csv}>\n              <StatisticInstallGraph\n                data={csv}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n              />\n            </StatisticsPanelInstall>\n          </Card.Grid>\n          <Card.Grid style={gridStyle}>\n            <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n              <StatisticBitsGraph\n                data={csv}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n              />\n            </StatisticsPanelBits>\n          </Card.Grid>\n        </Card>\n      );\n  }\n};\nexport const ContentBox = (props: IProps): JSX.Element => panels(props);\n","import React, { Component } from 'react';\nimport { ImportTwitchCSV, ContentBox, ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Layout, Icon, DatePicker, Row, Col, PageHeader, Menu, Empty } from 'antd';\nimport moment, { Moment } from 'moment';\nimport { RangePickerPresetRange } from 'antd/lib/date-picker/interface';\n\nconst { Header, Sider, Content, Footer } = Layout;\n\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\ninterface IRange {\n  [range: string]: RangePickerPresetRange;\n}\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n  initialDateIndex: number;\n  lastDateIndex: number;\n  collapsed: boolean;\n  menu: string;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name',\n      initialDateIndex: 0,\n      lastDateIndex: 0,\n      collapsed: false,\n      menu: '1'\n    };\n  }\n  csvJSON(csv: string): ITwitchExtensionPrimitiveCSV[] {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n    for (let i = 1; i < lines.length - 1; i++) {\n      let obj: any = {};\n      let currentline = lines[i].split(',');\n      for (let j = 0; j < headers.length; j++) {\n        if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n      }\n      result.push(obj);\n    }\n    return result;\n  }\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: this.csvJSON(content) }, () => {\n        if (this.state.csv !== null) {\n          this.setState({\n            name: this.state.csv[0]['Extension Name'],\n            initialDateIndex: this.setState.length - 1,\n            lastDateIndex: 0\n          });\n        }\n      });\n    }\n  };\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  };\n  handleClick = (e: any) => {\n    console.log('click', e);\n    this.setState({ menu: e.key });\n  };\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n  makeRanges = (data: ITwitchExtensionPrimitiveCSV[]): IRange => {\n    if (data.length >= 0 && data.length <= 6) {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ],\n        'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)]\n      };\n    } else if (data.length >= 0 && data.length >= 29) {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ],\n        'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)],\n        'Last 30 Days': [moment(data[29].Date, dateFormat), moment(data[0].Date, dateFormat)]\n      };\n    } else {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ]\n      };\n    }\n  };\n\n  parseDateToIndex = (dates: Moment[]) => {\n    const { csv } = this.state;\n    if (csv !== null && dates.length === 2) {\n      dates.forEach((date, ind) => {\n        const index = csv.findIndex(item => item.Date === date.format('YYYY-MM-DD'));\n        if (index !== -1 && ind === 0) this.setState({ initialDateIndex: index });\n        if (index !== -1 && ind === 1) this.setState({ lastDateIndex: index });\n      });\n    }\n  };\n  render() {\n    const { csv, initialDateIndex, lastDateIndex, menu } = this.state;\n    return (\n      <Layout>\n        <Sider\n          trigger={null}\n          collapsible\n          collapsed={this.state.collapsed}\n          breakpoint='sm'\n          style={{\n            background: '#0f0e11',\n            border: '1px solid hsla(0,0%,100%,.09)',\n            boxShadow:\n              '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n          }}>\n          <div className='logo'>\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              <Icon type='github' style={{ color: '#fff', fontSize: '1.5em', margin: '5px 6px' }} />\n            </a>\n          </div>\n          <Menu theme='dark' mode='inline' defaultSelectedKeys={['1']} onClick={this.handleClick}>\n            <Menu.Item\n              key='1'\n              style={{\n                background: '#6441a4',\n                border: '1px solid hsla(0,0%,100%,.09)'\n              }}>\n              <Icon type='dashboard' />\n              <span>Overview</span>\n            </Menu.Item>\n            <Menu.Item\n              key='2'\n              style={{\n                background: '#6441a4',\n                border: '1px solid hsla(0,0%,100%,.09)'\n              }}>\n              <Icon type='bar-chart' />\n              <span>Installations Graph </span>\n            </Menu.Item>\n            <Menu.Item\n              key='3'\n              style={{\n                background: '#6441a4',\n                border: '1px solid hsla(0,0%,100%,.09)'\n              }}>\n              <Icon type='line-chart' />\n              <span>Monetization Graph</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout style={{ padding: '0 0 24px' }}>\n          {/* <h1 style={{ color: '#fff' }}>\n              <Icon\n                className='trigger'\n                type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                onClick={this.toggle}\n                style={{\n                  color: '#fff',\n                  fontSize: '1.5em',\n                  marginTop: 10,\n                  marginRight: 20,\n                  marginLeft: -30\n                }}\n              />\n              &nbsp;&nbsp;Extension Overview: {this.state.name}\n            </h1> */}\n          {/* <Header className='header'> */}\n          <Menu\n            theme='light'\n            mode='horizontal'\n            defaultSelectedKeys={['2']}\n            style={{ lineHeight: '64px' }}>\n            <Menu.Item key='collap'>\n              <Icon\n                className='trigger'\n                type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                onClick={this.toggle}\n                style={{\n                  color: 'black',\n                  fontSize: '1.5em'\n                }}\n              />\n            </Menu.Item>\n\n            <Menu.Item key='0'>\n              <PageHeader title='Extension Overview: ' subTitle={this.state.name} />\n            </Menu.Item>\n            {/* <Menu.Item key='1'>\n              <PageHeader\n                title='CSV File'\n                subTitle={<ImportTwitchCSV handleFileChosen={this.handleFileChosen} />}\n              />\n            </Menu.Item> */}\n            <Menu.Item key='2'>\n              {csv !== null ? (\n                <PageHeader\n                  title='Graph Range Date'\n                  subTitle={\n                    <RangePicker\n                      defaultValue={[\n                        moment(csv[csv.length - 1].Date, dateFormat),\n                        moment(csv[0].Date, dateFormat)\n                      ]}\n                      ranges={this.makeRanges(csv)}\n                      format={dateFormat}\n                      size={'large'}\n                      onChange={(e: any) => this.parseDateToIndex(e)}\n                      disabled={csv === null}\n                    />\n                  }\n                />\n              ) : (\n                'Graph Range Date'\n              )}\n            </Menu.Item>\n          </Menu>\n          {/* </Header> */}\n          <Content>\n            <Row gutter={16}>\n              {/* <Col span={12}>\n                <PageHeader\n                  title='CSV File'\n                  subTitle={<ImportTwitchCSV handleFileChosen={this.handleFileChosen} />}\n                />\n              </Col>\n              <Col span={12}>\n                <PageHeader\n                  title='Graph Range Date'\n                  subTitle={\n                    csv !== null ? (\n                      <RangePicker\n                        defaultValue={[\n                          moment(csv[csv.length - 1].Date, dateFormat),\n                          moment(csv[0].Date, dateFormat)\n                        ]}\n                        ranges={this.makeRanges(csv)}\n                        format={dateFormat}\n                        size={'large'}\n                        onChange={(e: any) => this.parseDateToIndex(e)}\n                      />\n                    ) : (\n                      'Please, Upload CSV'\n                    )\n                  }\n                />\n              </Col> */}\n              <Col span={24}>\n                {csv !== null ? (\n                  <ContentBox\n                    menu={menu}\n                    csv={csv}\n                    initialDateIndex={initialDateIndex}\n                    lastDateIndex={lastDateIndex}\n                  />\n                ) : (\n                  <Empty\n                    style={{ height: '75vh', margin: 20, padding: 30 }}\n                    description={<span>Please click the button to import your CSV file</span>}>\n                    <PageHeader\n                      title='CSV File'\n                      subTitle={<ImportTwitchCSV handleFileChosen={this.handleFileChosen} />}\n                    />\n                  </Empty>\n                )}\n              </Col>\n            </Row>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Extension Analyze ©2019 Created by\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              Albérico Dias Barreto Filho\n            </a>\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Fragment } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from './types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataInstalls[] => {\n  let data: IDataInstalls[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      data.push(install);\n      return item;\n    }\n  });\n  data.reverse();\n  return data;\n};\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticInstallGraph = ({\n  data,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <BarChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='install' fill='#6441a4' />\n        <Bar dataKey='uninstalls' fill='#392e5c' />\n        <Bar dataKey='activations' fill='#9a7fcc' />\n      </BarChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { PureComponent, Fragment } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nimport { IDataBitsStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataBitsStatistic[] => {\n  let data: IDataBitsStatistic[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      data.push(bits);\n      return bits;\n    }\n  });\n  data.reverse();\n  return data;\n};\n\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticBitsGraph = ({ data, initialDateIndex, lastDateIndex }: IProps) => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <ComposedChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <CartesianGrid stroke='#f5f5f5' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n        <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n        <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n      </ComposedChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n"],"sourceRoot":""}