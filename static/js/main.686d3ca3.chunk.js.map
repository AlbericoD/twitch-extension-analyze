{"version":3,"sources":["components/svg/bits-svg.tsx","components/svg/new-tab-link.tsx","components/svg/index.tsx","components/upload-csv.tsx","components/table-channel.tsx","components/style.tsx","components/menu/sider.tsx","components/menu/top.tsx","components/statistics-panel/statistics-panel-bits.tsx","components/statistics-panel/statistics-panel-install.tsx","components/statistics-panel/statistics-panel-iteration.tsx","components/statistics-panel/statistics-top-panel.tsx","components/statistics-panel/statistics-panel-live.tsx","components/graphs/bits-statistic-graph.tsx","components/graphs/install-statistic-graph.tsx","components/graphs/statistics-panel-iteration-graph.tsx","containers/monetization-graph.tsx","containers/installations-graph.tsx","containers/overview.tsx","containers/interation-graph.tsx","utils/make-ranges.ts","utils/csv-to-json.ts","containers/live-activated-channels.tsx","utils/use-async-effect.ts","containers/content.tsx","App.tsx","serviceWorker.ts","index.tsx","components/index.tsx"],"names":["bitsSVG","react_default","a","createElement","className","width","height","version","viewBox","x","y","d","fillRule","newTabLink","__webpack_require__","__webpack_exports__","bits_svg_bitsSVG","new_tab_link_newTabLink","ImportTwitchCSV","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_ref","handleFileChosen","type","accept","onChange","e","target","files","placeholder","Column","ChannelsList","data","react__WEBPACK_IMPORTED_MODULE_4___default","Fragment","antd_es_table__WEBPACK_IMPORTED_MODULE_3__","dataSource","loading","length","pagination","pageSize","title","dataIndex","key","sorter","b","username","toLocaleLowerCase","game","defaultSortOrder","parseInt","view_count","render","record","href","concat","antd_es_icon__WEBPACK_IMPORTED_MODULE_1__","component","cardBody","gridStyle","gridStyleStatisc","statisticStyle","graphCardStyle","margin","paddingTop","border","boxShadow","textAlign","background","color","options","icon","name","Sider","collapsed","handleClick","onCollapse","loadedCsv","current","react_router_dom","layout","collapsible","breakpoint","style","fontSize","es_menu","theme","mode","defaultSelectedKeys","selectedKeys","onClick","map","option","Item","disabled","to","Top","children","lineHeight","page_header","subTitle","StatisticsPanelBits","cardCss","statisticCss","csv","row","gutter","col","span","card","Grid","statistic","value","item","parseFloat","reduce","prev","next","prefix","precision","valueStyle","divider","StatisticsPanelInstall","Uninstalls","suffix","Installs","Activations","StatisticsPanelIteration","Clicks","Minimizations","Unminimizations","statisticsPanel","StatisticsTopPanel","css","index","StatisticsPanelLive","channels","lastUpdate","StatisticBitsGraph","react","es6","aspect","stroke","dataKey","fill","barSize","StatisticInstallGraph","strokeDasharray","StatisticIteractionGraph","syncId","MonetizationGraphBox","props","_useState","useState","bits","_useState2","Object","slicedToArray","setState","useEffect","initialDateIndex","lastDateIndex","bitsData","csvData","filter","Date","USD","bitsUsed","transactions","push","reverse","makeData","padding","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph_StatisticBitsGraph","InstallationsGraphBox","installs","installsData","install","activations","uninstalls","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph_StatisticInstallGraph","OverViewBox","statistics_top_panel_StatisticsTopPanel","installations_graph_InstallationsGraphBox","monetization_graph_MonetizationGraphBox","InterationGraphBox","iteraction","iteractionData","interactionRate","minimizations","unminimizations","statistics_panel_iteration_StatisticsPanelIteration","statistics_panel_iteration_graph_StatisticIteractionGraph","dateFormat","csvToJSON","lines","split","headers","result","i","obj","currentline","j","undefined","getLiveChannels","clientID","Headers","Client-ID","fetch","then","res","ok","Error","statusText","json","catch","err","console","log","message","addkey","objectSpread","id","LiveActivatedChannelsBox","effect","dependencies","asyncToGenerator","regenerator_default","mark","_callee","_channels","wrap","_context","sent","t0","error","stop","cleanupPromise","cleanup","statistics_panel_live_StatisticsPanelLive","moment","format","components","ContentBox","uploadCSV","handlePushhistory","react_router","exact","path","_ref2","history","empty","description","footer","es_button","from","overview_OverViewBox","interation_graph_InterationGraphBox","live_activated_channels_LiveActivatedChannelsBox","panels","Header","Content","Footer","RangePicker","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","ms","arguments","menu","setTimeout","load","handleFileRead","fileReader","content","toggle","bind","file","onloadend","readAsText","parseDateToIndex","dates","forEach","date","ind","findIndex","FileReader","fileName","_this2","_this$state","minHeight","sider_Sider","marginBottom","position","zIndex","top_Top","defaultValue","ranges","First Extension Release - Last Date CSV","Last Day","Last 7 Days","Last 30 Days","size","marginTop","spin","tip","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","_style__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_upload_csv__WEBPACK_IMPORTED_MODULE_2__","_table_channel__WEBPACK_IMPORTED_MODULE_3__"],"mappings":"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","file":"static/js/main.686d3ca3.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\n\nexport const bitsSVG = (): ReactElement<SVGAElement> => (\n  <svg\n    className='bits-icon__svg'\n    width='1em'\n    height='1em'\n    version='1.1'\n    viewBox='0 0 20 20'\n    x='0px'\n    y='0px'>\n    <path\n      d='M9.592 9.081L3 11.802l6.122-9.336A1.05 1.05 0 0 1 10 2c.357 0 .688.176.878.466L17 11.802l-6.592-2.72a1.077 1.077 0 0 0-.816 0zM10 11l6 2.638-5.407 4.16a.973.973 0 0 1-1.186 0L4 13.638 10 11z'\n      fillRule='evenodd'\n    />\n  </svg>\n);\n","import React, { ReactElement } from 'react';\n\nexport const newTabLink = (): ReactElement<SVGAElement> => (\n  <svg\n    className='bits-icon__svg'\n    width='1.5em'\n    height='1.5em'\n    version='1.1'\n    viewBox='0 0 20 20'\n    x='0px'\n    y='0px'>\n    <path\n      d='M15 9.997a1 1 0 0 1 1 1v5.994a1 1 0 0 1-1.003 1.005H3.003A1 1 0 0 1 2 16.99V4.997a.999.999 0 0 1 1.003-1.001h5.994a1 1 0 1 1 0 2H4v10h10v-5a1 1 0 0 1 1-1zm2.704-7.704c.187.187.293.442.293.707v5.001a.999.999 0 0 1-1.707.707l-1.293-1.293-2.293 2.293a1 1 0 0 1-1.414 0l-1-1a1 1 0 0 1 0-1.415L12.583 5 11.29 3.708A1.002 1.002 0 0 1 11.997 2h5a1 1 0 0 1 .707.293z'\n      fillRule='evenodd'\n    />\n  </svg>\n);\n","export * from './bits-svg';\nexport * from './new-tab-link';\n","import React from 'react';\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <label className='label'>\n      <input\n        type='file'\n        accept='.csv'\n        onChange={(e: any) => handleFileChosen(e.target.files[0])}\n        placeholder='Click to Upload'\n      />\n    </label>\n  );\n};\n","import React from 'react';\nimport { Table, Icon } from 'antd';\nimport { IChannels } from '../containers';\nimport { newTabLink } from './svg';\nconst { Column } = Table;\n\ninterface IProps {\n  data: IChannels[];\n}\n\nexport const ChannelsList = ({ data }: IProps): JSX.Element => (\n  <>\n    <Table dataSource={data} loading={data.length == 0} pagination={{ pageSize: 8 }}>\n      <Column\n        title='Name'\n        dataIndex='username'\n        key='username'\n        sorter={(a: IChannels, b: IChannels) => {\n          if (a.username.toLocaleLowerCase() < b.username.toLocaleLowerCase()) return -1;\n          else if (a.username.toLocaleLowerCase() > b.username.toLocaleLowerCase()) return 1;\n          return 0;\n        }}\n      />\n      <Column\n        title='Game'\n        dataIndex='game'\n        key='game'\n        sorter={(a: IChannels, b: IChannels) => {\n          if (a.game.toLocaleLowerCase() < b.game.toLocaleLowerCase()) return -1;\n          else if (a.game.toLocaleLowerCase() > b.game.toLocaleLowerCase()) return 1;\n          return 0;\n        }}\n      />\n      <Column title='Title' dataIndex='title' key='title' />\n      <Column\n        title='View Count'\n        dataIndex='view_count'\n        key='view_count'\n        defaultSortOrder='descend'\n        sorter={(a: IChannels, b: IChannels) => parseInt(a.view_count) - parseInt(b.view_count)}\n      />\n\n      <Column\n        title='Live'\n        key='action'\n        render={(record: IChannels) => (\n          <span>\n            <a href={`https://www.twitch.tv/${record.username}`} target='__blank'>\n              <Icon component={newTabLink} />\n            </a>\n          </span>\n        )}\n      />\n    </Table>\n  </>\n);\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  // background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: 'rgb(25, 23, 28)',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\nexport const graphCardStyle: CSSProperties = {\n  margin: 1,\n  paddingTop: 1,\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport { Layout, Menu, Icon } from 'antd';\n\ninterface IProps {\n  collapsed: boolean;\n  handleClick: (event: any) => void;\n  onCollapse: (event: any) => void;\n  loadedCsv: boolean;\n  current: string;\n}\ntype TOptions =\n  | 'upload-csv'\n  | 'overview'\n  | 'installations'\n  | 'monetization'\n  | 'iteraction'\n  | 'activated';\ninterface IOptions {\n  key: TOptions;\n  icon: string;\n  name: string;\n}\nconst options: IOptions[] = [\n  {\n    key: 'upload-csv',\n    icon: 'upload',\n    name: 'Upload CSV'\n  },\n  {\n    key: 'overview',\n    icon: 'dashboard',\n    name: 'Overview'\n  },\n  {\n    key: 'installations',\n    icon: 'bar-chart',\n    name: 'Installations Graph '\n  },\n  {\n    key: 'monetization',\n    icon: 'line-chart',\n    name: 'Monetization Graph'\n  },\n  {\n    key: 'iteraction',\n    icon: 'area-chart',\n    name: 'Iteration Graph'\n  },\n  {\n    key: 'activated',\n    icon: 'table',\n    name: 'Live Activated Channels'\n  }\n];\n\nexport const Sider = ({\n  collapsed,\n  handleClick,\n  onCollapse,\n  loadedCsv,\n  current\n}: IProps): JSX.Element => (\n  <Router>\n    <Layout.Sider\n      collapsible\n      collapsed={collapsed}\n      onCollapse={onCollapse}\n      breakpoint='sm'\n      style={{\n        background: '#0f0e11',\n        border: '1px solid hsla(0,0%,100%,.09)',\n        boxShadow:\n          '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n      }}>\n      <div className='logo'>\n        <a href='https://github.com/AlbericoD/twitch-extension-analyze' target='__blank'>\n          <Icon type='github' style={{ color: '#fff', fontSize: '1.5em', margin: '5px 6px' }} />\n        </a>\n      </div>\n      <Menu\n        theme='dark'\n        mode='inline'\n        defaultSelectedKeys={['upload-csv']}\n        selectedKeys={[current]}\n        onClick={handleClick}>\n        {options.map(option => (\n          <Menu.Item key={option.key} disabled={loadedCsv}>\n            <Icon type={option.icon} />\n            <span>{option.name}</span>\n            <Link to={`/${option.key}`} />\n          </Menu.Item>\n        ))}\n      </Menu>\n    </Layout.Sider>\n  </Router>\n);\n","import React, { ReactNode } from 'react';\nimport { Menu, PageHeader } from 'antd';\n\ninterface IProps {\n  name: string;\n  children: ReactNode;\n}\nexport const Top = ({ name, children }: IProps): JSX.Element => (\n  <Menu theme='light' mode='horizontal' defaultSelectedKeys={['2']} style={{ lineHeight: '64px' }}>\n    <Menu.Item key='0'>\n      <PageHeader title='Extension: ' subTitle={name} />\n    </Menu.Item>\n\n    <Menu.Item key='2'>{children}</Menu.Item>\n  </Menu>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\nimport { bitsSVG } from '../svg/index';\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\n\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon component={bitsSVG} />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    {/* if >= 0 icon = meh: simle */}\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Transactions '\n          value={csv\n            .map(item => parseInt(item['Bits Transactions']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Details Page Visits'\n          value={csv\n            .map(item => parseInt(item['Extension Details Page Visits']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls / Installs'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelIteration = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Interaction Rate'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item['Interaction Rate']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={4}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Clicks'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Clicks))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Minimizations'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Minimizations))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={6}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Unminimizations'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Unminimizations))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { IChannels } from '../../containers';\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  channels: IChannels[];\n\n  lastUpdate: string;\n  children: ReactNode;\n}\nexport const StatisticsPanelLive = ({\n  cardCss,\n  statisticCss,\n  channels,\n  lastUpdate,\n  children\n}: IProps) => (\n  <Row gutter={16}>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Total channels'\n          value={channels.length}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Total view count'\n          value={channels\n            .map((item: IChannels) => parseInt(item.view_count))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={8}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Last update'\n          value={lastUpdate}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import React, { Fragment } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush\n} from 'recharts';\n\nimport { IDataBitsStatistic } from '../types';\n\ninterface IProps {\n  data: IDataBitsStatistic[];\n}\nexport const StatisticBitsGraph = ({ data }: IProps) => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <ComposedChart data={data}>\n        <Brush />\n        <CartesianGrid stroke='#f5f5f5' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n        <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n        <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n      </ComposedChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { Fragment } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush\n} from 'recharts';\nimport { IDataInstalls } from '../types';\n\ninterface IProps {\n  data: IDataInstalls[];\n}\nexport const StatisticInstallGraph = ({ data }: IProps): JSX.Element => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <BarChart data={data}>\n        <Brush />\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='install' fill='#6441a4' />\n        <Bar dataKey='uninstalls' fill='#392e5c' />\n        <Bar dataKey='activations' fill='#9a7fcc' />\n      </BarChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { Fragment } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Brush,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  ComposedChart,\n  Bar\n} from 'recharts';\nimport { IIteraction } from '../types';\nimport { Row, Col } from 'antd';\n\ninterface IProps {\n  data: IIteraction[];\n}\nexport const StatisticIteractionGraph = ({ data }: IProps): JSX.Element => {\n  return (\n    <Fragment>\n      <Row gutter={16}>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <LineChart data={data} syncId='anyId'>\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Line type='monotone' dataKey='interactionRate' stroke='#8884d8' fill='#392e5c' />\n            </LineChart>\n          </ResponsiveContainer>\n        </Col>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <AreaChart data={data} syncId='anyId'>\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Area type='monotone' dataKey='minimizations' stroke='#6441a4' fill='#9a7fcc' />\n            </AreaChart>\n          </ResponsiveContainer>\n        </Col>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <LineChart data={data} syncId='anyId'>\n              <CartesianGrid strokeDasharray='3 3' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Line type='monotone' dataKey='unminimizations' stroke='#9a7fcc' fill='#6441a4' />\n              <Brush />\n            </LineChart>\n          </ResponsiveContainer>\n        </Col>\n        <Col span={12}>\n          <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n            <ComposedChart data={data}>\n              <CartesianGrid stroke='#f5f5f5' />\n              <XAxis dataKey='name' />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Area type='monotone' dataKey='unminimizations' fill='#6441a4' stroke='#8884d8' />\n              <Bar dataKey='interactionRate' barSize={20} fill='#392e5c' />\n              <Line type='monotone' dataKey='minimizations' stroke='#9a7fcc' />\n              <Brush />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n","import React, { CSSProperties, FunctionComponent, useState, useEffect } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelBits } from '../components/statistics-panel';\nimport { StatisticBitsGraph } from '../components/graphs';\nimport { ITwitchExtensionPrimitiveCSV, IDataBitsStatistic } from '../components/types';\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\ninterface IContainerData {\n  bits: IDataBitsStatistic[];\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IContainerData => {\n  let bitsData: IDataBitsStatistic[] = [];\n  let csvData: ITwitchExtensionPrimitiveCSV[] = [];\n\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      bitsData.push(bits);\n      csvData.push(item);\n    }\n  });\n  bitsData.reverse();\n  csvData.reverse();\n  return {\n    csv: csvData,\n    bits: bitsData\n  };\n};\n\nexport const MonetizationGraphBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IContainerData>({ csv: [], bits: [] });\n  useEffect(() => {\n    setState(makeData(props.csv, props.initialDateIndex, props.lastDateIndex));\n  }, [props.csv, props.initialDateIndex, props.lastDateIndex]);\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelBits\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          csv={data.csv}>\n          <StatisticBitsGraph data={data.bits} />\n        </StatisticsPanelBits>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import React, { CSSProperties, FunctionComponent, useState, useEffect } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelInstall } from '../components/statistics-panel';\nimport { StatisticInstallGraph } from '../components/graphs/install-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from '../components';\n\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\ninterface IContainerData {\n  installs: IDataInstalls[];\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IContainerData => {\n  let installsData: IDataInstalls[] = [];\n  let csvData: ITwitchExtensionPrimitiveCSV[] = [];\n\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      installsData.push(install);\n      csvData.push(item);\n    }\n  });\n  installsData.reverse();\n  csvData.reverse();\n  return {\n    csv: csvData,\n    installs: installsData\n  };\n};\n\nexport const InstallationsGraphBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IContainerData>({ csv: [], installs: [] });\n  useEffect(() => {\n    setState(makeData(props.csv, props.initialDateIndex, props.lastDateIndex));\n  }, [props.csv, props.initialDateIndex, props.lastDateIndex]);\n\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelInstall\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          csv={data.csv}>\n          <StatisticInstallGraph data={data.installs} />\n        </StatisticsPanelInstall>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsTopPanel } from '../components/statistics-panel';\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\nimport { graphCardStyle } from '../components';\n\nimport { MonetizationGraphBox } from './monetization-graph';\nimport { InstallationsGraphBox } from './installations-graph';\ninterface IProps {\n  cardBody: CSSProperties;\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  gridStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const OverViewBox = ({\n  cardBody,\n  gridStyleStatisc,\n  statisticStyle,\n  gridStyle,\n  csv,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Card style={cardBody}>\n    <Card.Grid style={gridStyleStatisc}>\n      <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n    </Card.Grid>\n\n    <Card.Grid style={gridStyle}>\n      <InstallationsGraphBox\n        csv={csv}\n        graphCardStyle={graphCardStyle}\n        gridStyleStatisc={gridStyleStatisc}\n        statisticStyle={statisticStyle}\n        initialDateIndex={initialDateIndex}\n        lastDateIndex={lastDateIndex}\n      />\n    </Card.Grid>\n\n    <Card.Grid style={gridStyle}>\n      <MonetizationGraphBox\n        csv={csv}\n        graphCardStyle={graphCardStyle}\n        gridStyleStatisc={gridStyleStatisc}\n        statisticStyle={statisticStyle}\n        initialDateIndex={initialDateIndex}\n        lastDateIndex={lastDateIndex}\n      />\n    </Card.Grid>\n  </Card>\n);\n","import React, { CSSProperties, FunctionComponent, useEffect, useState } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelIteration } from '../components/statistics-panel';\nimport { ITwitchExtensionPrimitiveCSV, IIteraction } from '../components';\nimport { StatisticIteractionGraph } from '../components/graphs';\n\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\ninterface IContainerData {\n  iteraction: IIteraction[];\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IContainerData => {\n  let iteractionData: IIteraction[] = [];\n  let csvData: ITwitchExtensionPrimitiveCSV[] = [];\n\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IIteraction = {\n        name: item.Date,\n        interactionRate: parseFloat(item['Interaction Rate']),\n        minimizations: parseFloat(item['Minimization Rate']),\n        unminimizations: parseFloat(item['Unminimization Rate'])\n      };\n      iteractionData.push(install);\n      csvData.push(item);\n    }\n  });\n  iteractionData.reverse();\n  csvData.reverse();\n  return {\n    csv: csvData,\n    iteraction: iteractionData\n  };\n};\nexport const InterationGraphBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IContainerData>({ csv: [], iteraction: [] });\n  useEffect(() => {\n    setState(makeData(props.csv, props.initialDateIndex, props.lastDateIndex));\n  }, [props.csv, props.initialDateIndex, props.lastDateIndex]);\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelIteration\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          csv={data.csv}>\n          <StatisticIteractionGraph data={data.iteraction} />\n        </StatisticsPanelIteration>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import { ITwitchExtensionPrimitiveCSV } from '../components';\nimport { RangePickerPresetRange } from 'antd/lib/date-picker/interface';\nimport moment from 'moment';\n\nconst dateFormat = 'YYYY/MM/DD';\n\ninterface IRange {\n  [range: string]: RangePickerPresetRange;\n}\nexport const makeRanges = (data: ITwitchExtensionPrimitiveCSV[]): IRange => {\n  if (data.length >= 0 && data.length <= 6) {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last Day': [moment(data[0].Date, dateFormat), moment(data[0].Date, dateFormat)],\n      'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  } else if (data.length >= 0 && data.length >= 29) {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last Day': [moment(data[0].Date, dateFormat), moment(data[0].Date, dateFormat)],\n      'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)],\n      'Last 30 Days': [moment(data[29].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  } else {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last Day': [moment(data[0].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  }\n};\n","import { ITwitchExtensionPrimitiveCSV } from '../components';\n\nexport const csvToJSON = (csv: string): ITwitchExtensionPrimitiveCSV[] => {\n  const lines = csv.split('\\n');\n  const headers = lines[0].split(',');\n  let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n  for (let i = 1; i < lines.length - 1; i++) {\n    let obj: any = {};\n    let currentline = lines[i].split(',');\n    for (let j = 0; j < headers.length; j++) {\n      if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n    }\n    result.push(obj);\n  }\n  return result;\n};\n","import React, { FunctionComponent, useState, CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport { useAsyncEffect } from '../utils';\nimport { ChannelsList } from '../components';\nimport { StatisticsPanelLive } from '../components/statistics-panel';\nimport moment from 'moment';\nconst uri =\n  'https://api.twitch.tv/extensions/hecb122wgtrzumrv9ywwjn7wg6nglq/live_activated_channels';\ninterface IProps {\n  clientID: string;\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n}\nexport interface IChannels {\n  id: string;\n  username: string;\n  game: string;\n  title: string;\n  view_count: string;\n}\n\nconst getLiveChannels = (clientID: string): Promise<IChannels[]> => {\n  const headers = new Headers({\n    'Client-ID': clientID\n  });\n  return fetch(uri, { headers })\n    .then((res: Response) => {\n      if (res.ok) return res;\n      throw new Error(res.statusText);\n    })\n    .then(res => res.json())\n    .then((data: { channels: IChannels[] }) => data.channels)\n    .catch(err => {\n      console.log(err.message);\n      throw new Error('Err to get streamer data');\n    });\n};\nconst addkey = (data: IChannels[]): IChannels[] =>\n  data.map((item: IChannels) => {\n    return { ...item, key: item.id };\n  });\n\nexport const LiveActivatedChannelsBox: FunctionComponent<IProps> = (props: IProps): JSX.Element => {\n  const [data, setState] = useState<IChannels[]>([]);\n  useAsyncEffect(async () => {\n    try {\n      const channels = await getLiveChannels(props.clientID);\n      setState(channels);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [props.clientID]);\n\n  return (\n    <Card style={props.graphCardStyle}>\n      <Card.Grid style={{ width: '100%', padding: 3 }}>\n        <StatisticsPanelLive\n          cardCss={props.gridStyleStatisc}\n          statisticCss={props.statisticStyle}\n          lastUpdate={moment().format('MMMM Do YYYY, h:mm:ss a')}\n          channels={data}>\n          <ChannelsList data={addkey(data)} />\n        </StatisticsPanelLive>\n      </Card.Grid>\n    </Card>\n  );\n};\n","import { useEffect } from 'react';\n\nexport function useAsyncEffect(effect: () => Promise<void | (() => void)>, dependencies?: any[]) {\n  return useEffect(() => {\n    const cleanupPromise = effect();\n    return () => {\n      cleanupPromise.then(cleanup => cleanup && cleanup());\n    };\n  }, dependencies);\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\nimport {\n  cardBody,\n  statisticStyle,\n  gridStyle,\n  graphCardStyle,\n  gridStyleStatisc\n} from '../components/style';\n\nimport { OverViewBox } from './overview';\nimport { MonetizationGraphBox } from './monetization-graph';\nimport { InstallationsGraphBox } from './installations-graph';\nimport { InterationGraphBox } from './interation-graph';\nimport { LiveActivatedChannelsBox } from './live-activated-channels';\nimport { Empty, PageHeader, Button } from 'antd';\nimport { ImportTwitchCSV } from '../components';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n  handleFileChosen: (file: any) => void;\n  handlePushhistory: (url: string) => void;\n  uploadCSV: boolean;\n}\nconst panels = ({\n  csv,\n  initialDateIndex,\n  lastDateIndex,\n  handleFileChosen,\n  uploadCSV,\n  handlePushhistory\n}: IProps): JSX.Element => {\n  return (\n    <Router>\n      <Switch>\n        <Route\n          exact\n          path='/upload-csv'\n          component={({ history }: any) => (\n            <Empty\n              style={{ height: '75vh', margin: 20, padding: 30 }}\n              description={\n                <>\n                  <span>\n                    Please click the button to import your CSV file <b> ( V2+ ) </b>\n                  </span>\n                </>\n              }>\n              <PageHeader\n                title='CSV File'\n                subTitle={<ImportTwitchCSV handleFileChosen={handleFileChosen} />}\n                footer={\n                  <Button\n                    disabled={!uploadCSV}\n                    icon='dashboard'\n                    onClick={() => {\n                      history.push('/overview');\n                      handlePushhistory('overview');\n                    }}>\n                    Overview\n                  </Button>\n                }\n              />\n            </Empty>\n          )}\n        />\n        <Redirect exact from='/' to='/upload-csv' />\n        <Route\n          exact\n          path='/overview'\n          component={() =>\n            csv.length ? (\n              <OverViewBox\n                cardBody={cardBody}\n                gridStyleStatisc={gridStyleStatisc}\n                statisticStyle={statisticStyle}\n                gridStyle={gridStyle}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n                csv={csv}\n              />\n            ) : (\n              <Redirect to='/upload-csv' />\n            )\n          }\n        />\n        <Route\n          exact\n          path='/installations'\n          component={() =>\n            csv.length ? (\n              <InstallationsGraphBox\n                graphCardStyle={graphCardStyle}\n                gridStyleStatisc={gridStyleStatisc}\n                statisticStyle={statisticStyle}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n                csv={csv}\n              />\n            ) : (\n              <Redirect to='/upload-csv' />\n            )\n          }\n        />\n        <Route\n          exact\n          path='/monetization'\n          component={() =>\n            csv.length ? (\n              <MonetizationGraphBox\n                graphCardStyle={graphCardStyle}\n                gridStyleStatisc={gridStyleStatisc}\n                statisticStyle={statisticStyle}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n                csv={csv}\n              />\n            ) : (\n              <Redirect to='/upload-csv' />\n            )\n          }\n        />\n        <Route\n          exact\n          path='/iteraction'\n          component={() =>\n            csv.length ? (\n              <InterationGraphBox\n                graphCardStyle={graphCardStyle}\n                gridStyleStatisc={gridStyleStatisc}\n                statisticStyle={statisticStyle}\n                initialDateIndex={initialDateIndex}\n                lastDateIndex={lastDateIndex}\n                csv={csv}\n              />\n            ) : (\n              <Redirect to='/upload-csv' />\n            )\n          }\n        />\n        <Route\n          exact\n          path='/activated'\n          component={() =>\n            csv.length ? (\n              <LiveActivatedChannelsBox\n                graphCardStyle={graphCardStyle}\n                gridStyleStatisc={gridStyleStatisc}\n                statisticStyle={statisticStyle}\n                clientID={csv[0]['Extension Client ID']}\n              />\n            ) : (\n              <Redirect to='/upload-csv' />\n            )\n          }\n        />\n        <Route component={() => <Redirect to='/upload-csv' />} />\n      </Switch>\n    </Router>\n  );\n};\nexport const ContentBox = (props: IProps): JSX.Element => panels(props);\n","import React, { Component } from 'react';\nimport { Layout, DatePicker, Row, Col, PageHeader, Spin } from 'antd';\nimport moment, { Moment } from 'moment';\nimport { ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Sider, Top } from './components/menu';\nimport { ContentBox } from './containers';\nimport { makeRanges, csvToJSON } from './utils';\n\nconst { Header, Content, Footer } = Layout;\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\n\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n  fileName: string;\n  initialDateIndex: number;\n  lastDateIndex: number;\n  collapsed: boolean;\n  menu: string;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name',\n      fileName: 'File Name',\n      initialDateIndex: 0,\n      lastDateIndex: 0,\n      collapsed: false,\n      menu: 'upload-csv'\n    };\n  }\n  delay = (ms: number = 0, menu: string = this.state.menu): NodeJS.Timeout =>\n    setTimeout(() => {\n      this.setState({ load: false, menu });\n    }, ms);\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: csvToJSON(content) }, () => {\n        setTimeout(\n          () => {\n            if (this.state.csv !== null) {\n              this.setState({\n                name: this.state.csv[0]['Extension Name'],\n                initialDateIndex: this.state.csv.length - 1,\n                lastDateIndex: 0,\n                load: false,\n                uploadCSV: true\n              });\n            }\n          },\n          this.state.csv !== null ? this.state.csv.length * 2 : 2\n        );\n      });\n    }\n  };\n\n  toggle = () => {\n    this.setState(\n      {\n        collapsed: !this.state.collapsed,\n        load: true\n      },\n      this.delay.bind(0.2)\n    );\n  };\n  handleClick = (e: any) => {\n    this.setState(\n      { menu: e.key || e, load: true },\n      this.delay.bind(this.state.csv !== null ? this.state.csv.length : 0)\n    );\n  };\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n\n  parseDateToIndex = (dates: Moment[]) => {\n    const { csv } = this.state;\n    if (csv !== null && dates.length === 2) {\n      dates.forEach((date, ind) => {\n        const index = csv.findIndex(item => item.Date === date.format('YYYY-MM-DD'));\n        if (index !== -1 && ind === 0) this.setState({ initialDateIndex: index });\n        if (index !== -1 && ind === 1) this.setState({ lastDateIndex: index });\n      });\n    }\n  };\n  render() {\n    const { csv, initialDateIndex, lastDateIndex, menu, load } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider\n          current={this.state.menu}\n          collapsed={this.state.collapsed}\n          handleClick={this.handleClick}\n          onCollapse={this.toggle}\n          loadedCsv={this.state.csv === null}\n        />\n        <Layout style={{ padding: '0 0 24px', marginBottom: 20 }}>\n          <Header style={{ position: 'fixed', zIndex: 2, width: '100%' }}>\n            <Top name={this.state.name}>\n              {csv !== null && menu !== 'activated' ? (\n                <PageHeader\n                  title='Graph Range Date'\n                  subTitle={\n                    <RangePicker\n                      defaultValue={[\n                        moment(csv[csv.length - 1].Date, dateFormat),\n                        moment(csv[0].Date, dateFormat)\n                      ]}\n                      ranges={makeRanges(csv)}\n                      format={dateFormat}\n                      size={'large'}\n                      onChange={(e: any) => this.parseDateToIndex(e)}\n                      disabled={csv === null}\n                    />\n                  }\n                />\n              ) : null}\n            </Top>\n          </Header>\n          <Content style={{ width: '100%', minHeight: '70vh', marginTop: 60 }}>\n            <Row gutter={16}>\n              <Col span={24}>\n                {!load ? (\n                  <ContentBox\n                    handlePushhistory={this.handleClick}\n                    uploadCSV={this.state.uploadCSV}\n                    initialDateIndex={initialDateIndex}\n                    lastDateIndex={lastDateIndex}\n                    handleFileChosen={this.handleFileChosen}\n                    csv={csv !== null ? csv : []}\n                  />\n                ) : (\n                  <div className='load-csv'>\n                    <Spin tip='loading ...' />\n                  </div>\n                )}\n              </Col>\n            </Row>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Extension Analyze ©2019 Created by&nbsp;&nbsp;\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              Albérico Dias Barreto Filho\n            </a>\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export * from './style';\nexport * from './types';\nexport * from './upload-csv';\nexport * from './table-channel';\n"],"sourceRoot":""}