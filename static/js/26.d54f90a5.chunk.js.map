{"version":3,"sources":["containers/upload.tsx"],"names":["UploadBox","connect","dispatch","handleFileChosen","file","fileChosen","_ref","_useState","useState","_useState2","Object","_home_alberico_Documentos_Projetos_Twitch_Dashboard_twitch_extension_analyze_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","load","redirect","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_router__WEBPACK_IMPORTED_MODULE_5__","to","Fragment","id","htmlFor","className","type","accept","onChange","e","target","files","placeholder","memo"],"mappings":"wLAsCMA,EAAYC,YAChB,KARyB,SAACC,GAC1B,MAAO,CACLC,iBAAkB,SAACC,GACjBF,EAASG,qBAAWD,OAIRH,CA3B8B,SAAAK,GAAuC,IAApCH,EAAoCG,EAApCH,iBAAoCI,EAC5DC,oBAAkB,GAD0CC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9EK,EAD8EH,EAAA,GACxEI,EADwEJ,EAAA,GAErF,OAAIG,EAAaE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,cAE5BJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACEL,EAAAC,EAAAC,cAAA,SAAOI,GAAG,YAAYC,QAAQ,OAAOC,UAAU,SAC7CR,EAAAC,EAAAC,cAAA,SACEI,GAAG,OACHG,KAAK,OACLC,OAAO,OACPC,SAAU,SAACC,GACTvB,EAAiBuB,EAAEC,OAAOC,MAAM,IAChCf,GAAS,IAEXgB,YAAY,wBAkBPC,yBAAK,kBAAMhB,EAAAC,EAAAC,cAAChB,EAAD","file":"static/js/26.d54f90a5.chunk.js","sourcesContent":["import React, { FunctionComponent, memo, useState } from 'react';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { connect } from 'react-redux';\nimport { fileChosen } from '../store';\nimport './upload.less';\nimport { Redirect } from 'react-router';\n\ninterface DispachProps {\n  handleFileChosen(event: any): void;\n}\n\nconst Upload: FunctionComponent<DispachProps> = ({ handleFileChosen }): JSX.Element => {\n  const [load, redirect] = useState<boolean>(false);\n  if (load) return <Redirect to='/overview' />;\n  return (\n    <>\n      <label id='largeFile' htmlFor='file' className='label'>\n        <input\n          id='file'\n          type='file'\n          accept='.csv'\n          onChange={(e: any) => {\n            handleFileChosen(e.target.files[0]);\n            redirect(true);\n          }}\n          placeholder='Click to Upload'\n        />\n      </label>\n    </>\n  );\n};\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispachProps => {\n  return {\n    handleFileChosen: (file: any) => {\n      dispatch(fileChosen(file));\n    }\n  };\n};\nconst UploadBox = connect(\n  null,\n  mapDispatchToProps\n)(Upload);\n\nexport default memo(() => <UploadBox />);\n"],"sourceRoot":""}