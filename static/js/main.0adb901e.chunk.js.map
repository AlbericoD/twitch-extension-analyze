{"version":3,"sources":["components/bits-statistic-graph.tsx","components/index.tsx","components/upload-csv.tsx","components/statistics-top-panel.tsx","components/statistics-panel-install.tsx","components/statistics-panel-bits.tsx","components/style.tsx","components/content.tsx","App.tsx","serviceWorker.ts","index.tsx","components/install-statistic-graph.tsx"],"names":["__webpack_require__","d","__webpack_exports__","StatisticBitsGraph","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","recharts__WEBPACK_IMPORTED_MODULE_1__","makeData","csv","initialDateIndex","lastDateIndex","data","filter","item","index","bits","name","Date","USD","parseFloat","bitsUsed","transactions","push","reverse","_ref","a","createElement","width","aspect","stroke","dataKey","type","fill","barSize","_upload_csv__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_content__WEBPACK_IMPORTED_MODULE_3__","ImportTwitchCSV","handleFileChosen","react__WEBPACK_IMPORTED_MODULE_4___default","className","antd_es_input__WEBPACK_IMPORTED_MODULE_1__","accept","onChange","e","target","files","placeholder","prefix","antd_es_icon__WEBPACK_IMPORTED_MODULE_3__","style","color","margin","padding","statisticsPanel","title","precision","icon","StatisticsTopPanel","css","value","react_default","row","gutter","map","col","span","key","statistic","valueStyle","StatisticsPanelInstall","cardCss","statisticCss","children","card","Grid","parseInt","Activations","reduce","prev","next","Uninstalls","suffix","concat","Installs","divider","background","StatisticsPanelBits","cardBody","paddingTop","border","boxShadow","gridStyle","textAlign","gridStyleStatisc","statisticStyle","ContentBox","statistics_top_panel_StatisticsTopPanel","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph","Header","Content","RangePicker","dateFormat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleFileRead","fileReader","result","content","setState","csvJSON","length","file","load","onloadend","readAsText","makeRanges","First Extension Release - Last Date CSV","moment","Last 7 Days","Last 30 Days","parseDateToIndex","dates","forEach","date","ind","findIndex","format","FileReader","uploadCSV","lines","split","headers","i","obj","currentline","j","undefined","_this2","_this$state","layout","href","fontSize","marginTop","marginRight","page_header","subTitle","components","defaultValue","ranges","size","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","StatisticInstallGraph","install","activations","uninstalls","strokeDasharray"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,IAgBMQ,EAAW,SACfC,EACAC,EACAC,GAEA,IAAIC,EAA6B,GAcjC,OAbAH,EAAII,OAAO,SAACC,EAAMC,GAChB,GAAIA,GAASJ,GAAiBI,GAASL,EAAkB,CACvD,IAAMM,EAA2B,CAC/BC,KAAMH,EAAKI,KACXC,IAAKC,WAAWN,EAAK,qBACrBO,SAAUD,WAAWN,EAAK,cAC1BQ,aAAcF,WAAWN,EAAK,uBAGhC,OADAF,EAAKW,KAAKP,GACHA,KAGXJ,EAAKY,UACEZ,GAQIT,EAAqB,SAAAsB,GAAA,IAAGb,EAAHa,EAAGb,KAAMF,EAATe,EAASf,iBAAkBC,EAA3Bc,EAA2Bd,cAA3B,OAChCN,EAAAqB,EAAAC,cAACvB,EAAA,SAAD,KACEC,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAqBqB,MAAM,OAAOC,OAAQ,GACxCxB,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAeK,KAAMJ,EAASI,EAAMF,EAAkBC,IACpDN,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAeuB,OAAO,YACtBzB,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAOwB,QAAQ,SACf1B,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,MACAF,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,MACAF,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,MACAF,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAMyB,KAAK,WAAWD,QAAQ,MAAME,KAAK,UAAUH,OAAO,YAC1DzB,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAKwB,QAAQ,eAAeG,QAAS,GAAID,KAAK,YAC9C5B,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAMyB,KAAK,WAAWD,QAAQ,WAAWD,OAAO,kDCtDxD,IAAAK,EAAAnC,EAAA,KAAAA,EAAAC,EAAAC,EAAA,oCAAAiC,EAAA,QAAAC,EAAApC,EAAA,KAAAA,EAAAqC,EAAAD,EAAA,eAAApC,EAAAC,EAAAC,EAAA,+BAAAkC,EAAA,aAAApC,EAAA,QAAAsC,EAAAtC,EAAA,KAAAA,EAAAC,EAAAC,EAAA,+BAAAoC,EAAA,IAAAtC,EAAA,2HCMauC,EAAkB,SAAAd,GAAkC,IAA/Be,EAA+Bf,EAA/Be,iBAChC,OACEC,EAAAf,EAAAC,cAAA,SAAOe,UAAU,SACfD,EAAAf,EAAAC,cAAAgB,EAAA,GACEX,KAAK,OACLY,OAAO,OACPC,SAAU,SAACC,GAAD,OAAYN,EAAiBM,EAAEC,OAAOC,MAAM,KACtDC,YAAY,kBACZC,OAAQT,EAAAf,EAAAC,cAAAwB,EAAA,GAAMnB,KAAK,SAASoB,MAAO,CAAEC,MAAO,kBAAmBC,OAAQ,GAAIC,QAAS,mKCLtFC,EAAgC,CACpC,CAAEC,MAAO,qCAAsCC,UAAW,EAAGC,KAAM,UACnE,CAAEF,MAAO,+BAAgCC,UAAW,EAAGC,KAAM,SAC7D,CAAEF,MAAO,6BAA8BC,UAAW,EAAGC,KAAM,OAC3D,CAAEF,MAAO,iCAAkCC,UAAW,EAAGC,KAAM,UAGpDC,EAAqB,SAAAnC,GAAA,IAAGoC,EAAHpC,EAAGoC,IAAKC,EAARrC,EAAQqC,MAAR,OAChCC,EAAArC,EAAAC,cAAAqC,EAAA,GAAKC,OAAQ,IACVT,EAAgBU,IAAI,SAACpD,EAAkBC,GAAnB,OACnBgD,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,EAAGC,IAAKtD,GACjBgD,EAAArC,EAAAC,cAAA2C,EAAA,GACElB,MAAOS,EACPJ,MAAO3C,EAAK2C,MACZK,MAAOA,EAAMhD,EAAK2C,OAClBc,WAAY,CAAElB,MAAO,WACrBK,UAAW,EACXR,OAAQa,EAAArC,EAAAC,cAAAgC,EAAA,GAAM3B,KAAMlB,EAAK6C,+BChBtBa,EAAyB,SAAA/C,GAAA,IAAGgD,EAAHhD,EAAGgD,QAASC,EAAZjD,EAAYiD,aAAcjE,EAA1BgB,EAA0BhB,IAAKkE,EAA/BlD,EAA+BkD,SAA/B,OACpCZ,EAAArC,EAAAC,cAAAqC,EAAA,GAAKC,OAAQ,IACXF,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACTL,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAOqB,GAChBV,EAAArC,EAAAC,cAAA2C,EAAA,GACEb,MAAM,sBACNK,MAAOrD,EAAIyD,IAAI,SAAApD,GAAI,OAAIgE,SAAShE,EAAKiE,eAAcC,OAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,GAAM,GACvFX,WAAY,CAAElB,MAAO,WACrBK,UAAW,EACXN,MAAOsB,MAIbX,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACTL,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAOqB,GAChBV,EAAArC,EAAAC,cAAA2C,EAAA,GACEC,WAAY,CAAElB,MAAO,WACrBI,MAAM,qBACNK,MAAOrD,EAAIyD,IAAI,SAAApD,GAAI,OAAIgE,SAAShE,EAAKqE,cAAaH,OAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,GAAM,GACtFE,OAAM,KAAAC,OAAO5E,EACVyD,IAAI,SAAApD,GAAI,OAAIgE,SAAShE,EAAKwE,YAC1BN,OAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,GAAM,IACvC9B,MAAOsB,MAKbX,EAAArC,EAAAC,cAAA4D,EAAA,GAASnC,MAAO,CAAEoC,WAAY,yBAC9BzB,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IAAKO,KC5BPc,EAAsB,SAAAhE,GAAA,IAAGgD,EAAHhD,EAAGgD,QAASC,EAAZjD,EAAYiD,aAAcjE,EAA1BgB,EAA0BhB,IAAKkE,EAA/BlD,EAA+BkD,SAA/B,OACjCZ,EAAArC,EAAAC,cAAAqC,EAAA,GAAKC,OAAQ,IACXF,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACTL,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAOqB,GAChBV,EAAArC,EAAAC,cAAA2C,EAAA,GACEb,MAAM,qBACNK,MAAOrD,EACJyD,IAAI,SAAApD,GAAI,OAAIM,WAAWN,EAAK,uBAC5BkE,OAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,GAAM,GACvChC,OAAQa,EAAArC,EAAAC,cAAAgC,EAAA,GAAM3B,KAAK,WACnB0B,UAAW,EACXa,WAAY,CAAElB,MAAO,WACrBD,MAAOsB,MAIbX,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACTL,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAOqB,GAChBV,EAAArC,EAAAC,cAAA2C,EAAA,GACEb,MAAM,mBACNK,MAAOrD,EACJyD,IAAI,SAAApD,GAAI,OAAIgE,SAAShE,EAAK,gBAC1BkE,OAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,GAAM,GACvCX,WAAY,CAAElB,MAAO,WACrBK,UAAW,EACXR,OAAQa,EAAArC,EAAAC,cAAAgC,EAAA,GAAM3B,KAAK,SACnBoB,MAAOsB,MAIbX,EAAArC,EAAAC,cAAA4D,EAAA,GAASnC,MAAO,CAAEoC,WAAY,yBAC9BzB,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IAAKO,sBCxCPe,EAA0B,CACrCpC,OAAQ,GACRqC,WAAY,GACZH,WAAY,UACZI,OAAQ,gCACRC,UACE,yGAGSC,EAA2B,CACtClE,MAAO,MACPmE,UAAW,SACXF,UACE,6FAESG,EAAkC,CAC7CpE,MAAO,OACPmE,UAAW,SACXP,WAAY,UACZI,OAAQ,gCACRC,UACE,6FAESI,EAAgC,CAC3C5C,MAAO,2CCVF,IAAM6C,EAAa,SAAAzE,GAAA,IAAGhB,EAAHgB,EAAGhB,IAAKC,EAARe,EAAQf,iBAAkBC,EAA1Bc,EAA0Bd,cAA1B,OACxBoD,EAAArC,EAAAC,cAAAiD,EAAA,GAAMxB,MAAOsC,GACX3B,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAO4C,GAChBjC,EAAArC,EAAAC,cAACwE,EAAD,CAAoBtC,IAAKoC,EAAgBnC,MAAOrD,EAAI,MAEtDsD,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAO0C,GAChB/B,EAAArC,EAAAC,cAACyE,EAAD,CAAwB3B,QAASuB,EAAkBtB,aAAcuB,EAAgBxF,IAAKA,GACpFsD,EAAArC,EAAAC,cAAC0E,EAAA,EAAD,CACEzF,KAAMH,EACNC,iBAAkBA,EAClBC,cAAeA,MAIrBoD,EAAArC,EAAAC,cAAAiD,EAAA,EAAMC,KAAN,CAAWzB,MAAO0C,GAChB/B,EAAArC,EAAAC,cAAC2E,EAAD,CAAqB7B,QAASuB,EAAkBtB,aAAcuB,EAAgBxF,IAAKA,GACjFsD,EAAArC,EAAAC,cAAC4E,EAAA,EAAD,CACE3F,KAAMH,EACNC,iBAAkBA,EAClBC,cAAeA,sUC5BjB6F,aAAQC,cACRC,kBACFC,EAAa,aAoKJC,cArJb,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAFRQ,WACwB,EAAAP,EA2BxBQ,eAAiB,WACf,GAA4C,kBAAjCR,EAAKO,MAAME,WAAWC,OAAqB,CACpD,IAAMC,EAAkBX,EAAKO,MAAME,WAAWC,OAC9CV,EAAKY,SAAS,CAAEjH,IAAKqG,EAAKa,QAAQF,IAAY,WACrB,OAAnBX,EAAKO,MAAM5G,KACbqG,EAAKY,SAAS,CACZzG,KAAM6F,EAAKO,MAAM5G,IAAI,GAAG,kBACxBC,iBAAkBoG,EAAKY,SAASE,OAAS,EACzCjH,cAAe,QAnCDmG,EA0CxBtE,iBAAmB,SAACqF,GAClBf,EAAKY,SAAS,CAAEI,MAAM,GAAQ,WAC5BhB,EAAKO,MAAME,WAAWQ,UAAYjB,EAAKQ,eACvCR,EAAKO,MAAME,WAAWS,WAAWH,MA7Cbf,EAgDxBmB,WAAa,SAACrH,GACZ,OAAIA,EAAKgH,QAAU,GAAKhH,EAAKgH,QAAU,EAC9B,CACLM,0CAA2C,CACzCC,IAAOvH,EAAKA,EAAKgH,OAAS,GAAG1G,KAAMyF,GACnCwB,IAAOvH,EAAK,GAAGM,KAAMyF,IAEvByB,cAAe,CAACD,IAAOvH,EAAK,GAAGM,KAAMyF,GAAawB,IAAOvH,EAAK,GAAGM,KAAMyF,KAEhE/F,EAAKgH,QAAU,GAAKhH,EAAKgH,QAAU,GACrC,CACLM,0CAA2C,CACzCC,IAAOvH,EAAKA,EAAKgH,OAAS,GAAG1G,KAAMyF,GACnCwB,IAAOvH,EAAK,GAAGM,KAAMyF,IAEvByB,cAAe,CAACD,IAAOvH,EAAK,GAAGM,KAAMyF,GAAawB,IAAOvH,EAAK,GAAGM,KAAMyF,IACvE0B,eAAgB,CAACF,IAAOvH,EAAK,IAAIM,KAAMyF,GAAawB,IAAOvH,EAAK,GAAGM,KAAMyF,KAGpE,CACLuB,0CAA2C,CACzCC,IAAOvH,EAAKA,EAAKgH,OAAS,GAAG1G,KAAMyF,GACnCwB,IAAOvH,EAAK,GAAGM,KAAMyF,MAtELG,EA4ExBwB,iBAAmB,SAACC,GAAoB,IAC9B9H,EAAQqG,EAAKO,MAAb5G,IACI,OAARA,GAAiC,IAAjB8H,EAAMX,QACxBW,EAAMC,QAAQ,SAACC,EAAMC,GACnB,IAAM3H,EAAQN,EAAIkI,UAAU,SAAA7H,GAAI,OAAIA,EAAKI,OAASuH,EAAKG,OAAO,iBAC/C,IAAX7H,GAAwB,IAAR2H,GAAW5B,EAAKY,SAAS,CAAEhH,iBAAkBK,KAClD,IAAXA,GAAwB,IAAR2H,GAAW5B,EAAKY,SAAS,CAAE/G,cAAeI,OAhFlE+F,EAAKO,MAAQ,CACXE,WAAY,IAAIsB,WAChBC,WAAW,EACXhB,MAAM,EACNrH,IAAK,KACLQ,KAAM,iBACNP,iBAAkB,EAClBC,cAAe,GATKmG,uEAYhBrG,GAKN,IAJA,IAAMsI,EAAQtI,EAAIuI,MAAM,MAClBC,EAAUF,EAAM,GAAGC,MAAM,KAC3BxB,EAAyC,GAEpC0B,EAAI,EAAGA,EAAIH,EAAMnB,OAAS,EAAGsB,IAAK,CAGzC,IAFA,IAAIC,EAAW,GACXC,EAAcL,EAAMG,GAAGF,MAAM,KACxBK,EAAI,EAAGA,EAAIJ,EAAQrB,OAAQyB,SACXC,IAAnBF,EAAYC,IAAuC,KAAnBD,EAAYC,KAAWF,EAAIF,EAAQI,IAAMD,EAAYC,IAE3F7B,EAAOjG,KAAK4H,GAEd,OAAO3B,mCA6DA,IAAA+B,EAAAtC,KAAAuC,EAC0CvC,KAAKI,MAA9C5G,EADD+I,EACC/I,IAAKC,EADN8I,EACM9I,iBAAkBC,EADxB6I,EACwB7I,cAC/B,OACEoD,EAAArC,EAAAC,cAAA8H,EAAA,OACE1F,EAAArC,EAAAC,cAAC6E,EAAD,CACEpD,MAAO,CACLoC,WAAY,YAEdzB,EAAArC,EAAAC,cAAA,MAAIyB,MAAO,CAAEC,MAAO,SAClBU,EAAArC,EAAAC,cAAA,KAAG+H,KAAK,+BAA+B3G,OAAO,WAC5CgB,EAAArC,EAAAC,cAAAgC,EAAA,GACE3B,KAAK,SACLoB,MAAO,CAAEC,MAAO,OAAQsG,SAAU,QAASC,UAAW,GAAIC,YAAa,OAJ7E,uBAOuB5C,KAAKI,MAAMpG,OAGpC8C,EAAArC,EAAAC,cAAC8E,EAAD,KACE1C,EAAArC,EAAAC,cAAAqC,EAAA,GAAKC,OAAQ,IACXF,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACTL,EAAArC,EAAAC,cAAAmI,EAAA,GACErG,MAAM,WACNsG,SAAUhG,EAAArC,EAAAC,cAACqI,EAAA,gBAAD,CAAiBxH,iBAAkByE,KAAKzE,sBAGtDuB,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACTL,EAAArC,EAAAC,cAAAmI,EAAA,GACErG,MAAM,mBACNsG,SACU,OAARtJ,EACEsD,EAAArC,EAAAC,cAAC+E,EAAD,CACEuD,aAAc,CACZ9B,IAAO1H,EAAIA,EAAImH,OAAS,GAAG1G,KAAMyF,GACjCwB,IAAO1H,EAAI,GAAGS,KAAMyF,IAEtBuD,OAAQjD,KAAKgB,WAAWxH,GACxBmI,OAAQjC,EACRwD,KAAM,QACNtH,SAAU,SAACC,GAAD,OAAYyG,EAAKjB,iBAAiBxF,MAG9C,wBAKRiB,EAAArC,EAAAC,cAAAwC,EAAA,GAAKC,KAAM,IACA,OAAR3D,EACCsD,EAAArC,EAAAC,cAACqI,EAAA,WAAD,CACEvJ,IAAKA,EACLC,iBAAkBA,EAClBC,cAAeA,IAEf,gBA9IAyJ,aCTEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5G,EAAArC,EAAAC,cAACiJ,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gDE3InBpL,EAAAC,EAAAC,EAAA,sBAAAmL,IAAA,IAAAjL,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,IAaMQ,EAAW,SACfC,EACAC,EACAC,GAEA,IAAIC,EAAwB,GAc5B,OAbAH,EAAII,OAAO,SAACC,EAAMC,GAChB,GAAIA,GAASJ,GAAiBI,GAASL,EAAkB,CACvD,IAAM4K,EAAyB,CAC7BrK,KAAMH,EAAKI,KACXqK,YAAazG,SAAShE,EAAKiE,aAC3BuG,QAASxG,SAAShE,EAAKwE,UACvBkG,WAAY1G,SAAShE,EAAKqE,aAG5B,OADAvE,EAAKW,KAAK+J,GACHxK,KAGXF,EAAKY,UACEZ,GAOIyK,EAAwB,SAAA5J,GAAA,IACnCb,EADmCa,EACnCb,KACAF,EAFmCe,EAEnCf,iBACAC,EAHmCc,EAGnCd,cAHmC,OAKnCN,EAAAqB,EAAAC,cAACvB,EAAA,SAAD,KACEC,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAqBqB,MAAM,OAAOC,OAAQ,GACxCxB,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAUK,KAAMJ,EAASI,EAAMF,EAAkBC,IAC/CN,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAekL,gBAAgB,QAC/BpL,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAOwB,QAAQ,SACf1B,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,MACAF,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,MACAF,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,MACAF,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAKwB,QAAQ,UAAUE,KAAK,YAC5B5B,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAKwB,QAAQ,aAAaE,KAAK,YAC/B5B,EAAAqB,EAAAC,cAACpB,EAAA,EAAD,CAAKwB,QAAQ,cAAcE,KAAK","file":"static/js/main.0adb901e.chunk.js","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nimport { IDataBitsStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataBitsStatistic[] => {\n  let data: IDataBitsStatistic[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      data.push(bits);\n      return bits;\n    }\n  });\n  data.reverse();\n  return data;\n};\n\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticBitsGraph = ({ data, initialDateIndex, lastDateIndex }: IProps) => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <ComposedChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <CartesianGrid stroke='#f5f5f5' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n        <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n        <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n      </ComposedChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","export * from './upload-csv';\nexport * from './types';\nexport * from './install-statistic-graph';\nexport * from './content';\nexport * from './bits-statistic-graph';\n","import React from 'react';\nimport { Input, Icon } from 'antd';\n\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <label className='label'>\n      <Input\n        type='file'\n        accept='.csv'\n        onChange={(e: any) => handleFileChosen(e.target.files[0])}\n        placeholder='Click to Upload'\n        prefix={<Icon type='upload' style={{ color: 'rgba(0,0,0,.25)', margin: 30, padding: 5 }} />}\n      />\n    </label>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations (Total)'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls (Total)'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used (BITS)'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={2}\n          prefix={<Icon type='like' />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: '#19171c',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\n","import React from 'react';\nimport { Card, Button } from 'antd';\nimport { StatisticsTopPanel } from './statistics-top-panel';\nimport { StatisticsPanelInstall } from './statistics-panel-install';\nimport { StatisticsPanelBits } from './statistics-panel-bits';\nimport { StatisticInstallGraph } from './install-statistic-graph';\nimport { StatisticBitsGraph } from './bits-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\nimport { cardBody, statisticStyle, gridStyle, gridStyleStatisc } from './style';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const ContentBox = ({ csv, initialDateIndex, lastDateIndex }: IProps): JSX.Element => (\n  <Card style={cardBody}>\n    <Card.Grid style={gridStyleStatisc}>\n      <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelInstall cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticInstallGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelInstall>\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticBitsGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelBits>\n    </Card.Grid>\n  </Card>\n);\n","import React, { Component } from 'react';\nimport { ImportTwitchCSV, ContentBox, ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Layout, Icon, DatePicker, Row, Col, PageHeader } from 'antd';\nimport moment, { Moment } from 'moment';\nimport { RangePickerPresetRange } from 'antd/lib/date-picker/interface';\n\nconst { Header, Content } = Layout;\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\ninterface IRange {\n  [range: string]: RangePickerPresetRange;\n}\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name',\n      initialDateIndex: 0,\n      lastDateIndex: 0\n    };\n  }\n  csvJSON(csv: string): ITwitchExtensionPrimitiveCSV[] {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n    for (let i = 1; i < lines.length - 1; i++) {\n      let obj: any = {};\n      let currentline = lines[i].split(',');\n      for (let j = 0; j < headers.length; j++) {\n        if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n      }\n      result.push(obj);\n    }\n    return result;\n  }\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: this.csvJSON(content) }, () => {\n        if (this.state.csv !== null) {\n          this.setState({\n            name: this.state.csv[0]['Extension Name'],\n            initialDateIndex: this.setState.length - 1,\n            lastDateIndex: 0\n          });\n        }\n      });\n    }\n  };\n\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n  makeRanges = (data: ITwitchExtensionPrimitiveCSV[]): IRange => {\n    if (data.length >= 0 && data.length <= 6) {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ],\n        'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)]\n      };\n    } else if (data.length >= 0 && data.length >= 29) {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ],\n        'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)],\n        'Last 30 Days': [moment(data[29].Date, dateFormat), moment(data[0].Date, dateFormat)]\n      };\n    } else {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ]\n      };\n    }\n  };\n\n  parseDateToIndex = (dates: Moment[]) => {\n    const { csv } = this.state;\n    if (csv !== null && dates.length === 2) {\n      dates.forEach((date, ind) => {\n        const index = csv.findIndex(item => item.Date === date.format('YYYY-MM-DD'));\n        if (index !== -1 && ind === 0) this.setState({ initialDateIndex: index });\n        if (index !== -1 && ind === 1) this.setState({ lastDateIndex: index });\n      });\n    }\n  };\n  render() {\n    const { csv, initialDateIndex, lastDateIndex } = this.state;\n    return (\n      <Layout>\n        <Header\n          style={{\n            background: '#6441a4'\n          }}>\n          <h1 style={{ color: '#fff' }}>\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              <Icon\n                type='github'\n                style={{ color: '#fff', fontSize: '1.5em', marginTop: 10, marginRight: 20 }}\n              />\n            </a>\n            Extension Overview: {this.state.name}\n          </h1>\n        </Header>\n        <Content>\n          <Row gutter={16}>\n            <Col span={12}>\n              <PageHeader\n                title='CSV File'\n                subTitle={<ImportTwitchCSV handleFileChosen={this.handleFileChosen} />}\n              />\n            </Col>\n            <Col span={12}>\n              <PageHeader\n                title='Graph Range Date'\n                subTitle={\n                  csv !== null ? (\n                    <RangePicker\n                      defaultValue={[\n                        moment(csv[csv.length - 1].Date, dateFormat),\n                        moment(csv[0].Date, dateFormat)\n                      ]}\n                      ranges={this.makeRanges(csv)}\n                      format={dateFormat}\n                      size={'large'}\n                      onChange={(e: any) => this.parseDateToIndex(e)}\n                    />\n                  ) : (\n                    'Please, Upload CSV'\n                  )\n                }\n              />\n            </Col>\n            <Col span={24}>\n              {csv !== null ? (\n                <ContentBox\n                  csv={csv}\n                  initialDateIndex={initialDateIndex}\n                  lastDateIndex={lastDateIndex}\n                />\n              ) : null}\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Fragment } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from './types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataInstalls[] => {\n  let data: IDataInstalls[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      data.push(install);\n      return item;\n    }\n  });\n  data.reverse();\n  return data;\n};\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticInstallGraph = ({\n  data,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <BarChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='install' fill='#6441a4' />\n        <Bar dataKey='uninstalls' fill='#392e5c' />\n        <Bar dataKey='activations' fill='#9a7fcc' />\n      </BarChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n"],"sourceRoot":""}