{"version":3,"sources":["components/global-calendar/index.tsx"],"names":["RangePicker","GlobalCalendarBox","connect","state","data","csv","dispatch","parseDateToIndex","props","dataChosen","makeRanges","_ref","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","Fragment","antd_es_spin__WEBPACK_IMPORTED_MODULE_1__","tip","className","defaultValue","moment","length","Date","ranges","format","size","onChange","disabled","memo"],"mappings":"kMAWQA,kBA4CFC,EAAoBC,YAZF,SAACC,GAAD,MAAqC,CAC3DC,KAAMD,EAAME,IAAID,OAGS,SAACE,GAC1B,MAAO,CACLC,iBAAkB,SAACC,GACjBF,EAASG,qBAAWD,KAEtBE,WAJK,eAOiBR,CAjCuB,SAAAS,GAAA,IAAGJ,EAAHI,EAAGJ,iBAAkBH,EAArBO,EAAqBP,KAArB,OAC/CQ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACY,OAATX,EACCQ,EAAAC,EAAAC,cAAAE,EAAA,GAAMC,IAAI,YAEVL,EAAAC,EAAAC,cAAA,OAAKI,UAAW,oBACdN,EAAAC,EAAAC,cAACd,EAAD,CACEmB,aAAc,CACZC,IAAOhB,EAAKA,EAAKiB,OAAS,GAAGC,KAlBtB,cAmBPF,IAAOhB,EAAK,GAAGkB,KAnBR,eAqBTC,OAAQb,YAAWN,GACnBoB,OAtBS,aAuBTC,KAAM,UACNC,SAAU,SAAAlB,GAAK,OAAID,EAAiBC,IACpCmB,SAAmB,OAATvB,IAAkBA,EAAKiB,aAuB5BO,yBAAK,kBAAMhB,EAAAC,EAAAC,cAACb,EAAD","file":"static/js/27.94c04194.chunk.js","sourcesContent":["import React, { FunctionComponent, memo } from 'react';\nimport { DatePicker, Spin } from 'antd';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { connect } from 'react-redux';\nimport { AppState, dataChosen } from '../../store';\nimport moment from 'moment';\nimport { RangePickerValue } from 'antd/lib/date-picker/interface';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\nimport { makeRanges } from '../../utils';\n\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\ninterface IStateToProps {\n  data: ITwitchExtensionPrimitiveCSV[] | null;\n}\ninterface DispachProps {\n  makeRanges(): void;\n  parseDateToIndex(props: RangePickerValue): void;\n}\ntype Props = DispachProps & IStateToProps;\n\nconst GlobalCalendar: FunctionComponent<Props> = ({ parseDateToIndex, data }) => (\n  <>\n    {data === null ? (\n      <Spin tip='no data' />\n    ) : (\n      <div className={'analyzeExtraWrap'}>\n        <RangePicker\n          defaultValue={[\n            moment(data[data.length - 1].Date, dateFormat),\n            moment(data[0].Date, dateFormat)\n          ]}\n          ranges={makeRanges(data)}\n          format={dateFormat}\n          size={'default'}\n          onChange={props => parseDateToIndex(props)}\n          disabled={data === null || !data.length}\n        />\n      </div>\n    )}\n  </>\n);\nconst mapStateToProps = (state: AppState): IStateToProps => ({\n  data: state.csv.data\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>): DispachProps => {\n  return {\n    parseDateToIndex: (props: RangePickerValue) => {\n      dispatch(dataChosen(props));\n    },\n    makeRanges() {}\n  };\n};\nconst GlobalCalendarBox = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GlobalCalendar);\n\nexport default memo(() => <GlobalCalendarBox />);\n"],"sourceRoot":""}