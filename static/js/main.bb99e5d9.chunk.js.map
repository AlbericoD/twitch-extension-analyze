{"version":3,"sources":["components/index.tsx","components/upload-csv.tsx","components/statistics-top-panel.tsx","components/statistics-panel-install.tsx","components/statistics-panel-bits.tsx","components/style.tsx","components/content.tsx","App.tsx","serviceWorker.ts","index.tsx","components/install-statistic-graph.tsx","components/bits-statistic-graph.tsx"],"names":["_upload_csv__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_content__WEBPACK_IMPORTED_MODULE_3__","ImportTwitchCSV","_ref","handleFileChosen","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","antd_es_row__WEBPACK_IMPORTED_MODULE_1__","gutter","style","margin","antd_es_col__WEBPACK_IMPORTED_MODULE_3__","span","className","antd_es_input__WEBPACK_IMPORTED_MODULE_5__","type","accept","onChange","e","target","files","placeholder","prefix","antd_es_icon__WEBPACK_IMPORTED_MODULE_7__","color","statisticsPanel","title","precision","icon","StatisticsTopPanel","css","value","react_default","row","map","item","index","col","key","statistic","valueStyle","StatisticsPanelInstall","cardCss","statisticCss","csv","children","card","Grid","parseInt","Activations","reduce","prev","next","Uninstalls","suffix","concat","Installs","divider","background","StatisticsPanelBits","parseFloat","cardBody","paddingTop","border","boxShadow","gridStyle","width","textAlign","gridStyleStatisc","statisticStyle","ContentBox","statistics_top_panel_StatisticsTopPanel","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph","data","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph","Header","Content","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleFileRead","fileReader","result","content","setState","csvJSON","name","file","load","onloadend","readAsText","FileReader","uploadCSV","lines","split","headers","i","length","obj","currentline","j","undefined","push","layout","href","fontSize","marginTop","marginRight","components","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","StatisticInstallGraph","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","recharts__WEBPACK_IMPORTED_MODULE_1__","makeData","filter","install","Date","activations","uninstalls","reverse","aspect","strokeDasharray","dataKey","fill","StatisticBitsGraph","bits","USD","bitsUsed","transactions","stroke","barSize"],"mappings":"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","file":"static/js/main.bb99e5d9.chunk.js","sourcesContent":["export * from './upload-csv';\nexport * from './types';\nexport * from './install-statistic-graph';\nexport * from './content';\nexport * from './bits-statistic-graph';\n","import React from 'react';\nimport { Input, Icon, Row, Col } from 'antd';\n\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <Row gutter={16} style={{ margin: 10 }}>\n      <Col span={6}>\n        <label className='label'>\n          <span className='title'>Add CSV</span>\n          <Input\n            type='file'\n            accept='.csv'\n            onChange={(e: any) => handleFileChosen(e.target.files[0])}\n            placeholder='Click to Upload'\n            prefix={<Icon type='upload' style={{ color: 'rgba(0,0,0,.25)' }} />}\n          />\n        </label>\n      </Col>\n    </Row>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations (Total)'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls (Total)'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used (BITS)'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={2}\n          prefix={<Icon type='like' />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: '#19171c',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\n","import React from 'react';\nimport { Card, Button } from 'antd';\nimport { StatisticsTopPanel } from './statistics-top-panel';\nimport { StatisticsPanelInstall } from './statistics-panel-install';\nimport { StatisticsPanelBits } from './statistics-panel-bits';\nimport { StatisticInstallGraph } from './install-statistic-graph';\nimport { StatisticBitsGraph } from './bits-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\nimport { cardBody, statisticStyle, gridStyle, gridStyleStatisc } from './style';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n}\nexport const ContentBox = ({ csv }: IProps): JSX.Element => (\n  <Card style={cardBody}>\n    <Card.Grid style={gridStyleStatisc}>\n      <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelInstall cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticInstallGraph data={csv} />\n      </StatisticsPanelInstall>\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticBitsGraph data={csv} />\n      </StatisticsPanelBits>\n    </Card.Grid>\n  </Card>\n);\n","import React, { Component } from 'react';\nimport { ImportTwitchCSV, ContentBox, ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Layout, Icon } from 'antd';\n\nconst { Header, Content } = Layout;\n\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name'\n    };\n  }\n  csvJSON(csv: string): ITwitchExtensionPrimitiveCSV[] {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n    for (let i = 1; i < lines.length - 1; i++) {\n      let obj: any = {};\n      let currentline = lines[i].split(',');\n      for (let j = 0; j < headers.length; j++) {\n        if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n      }\n      result.push(obj);\n    }\n    return result;\n  }\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: this.csvJSON(content) }, () => {\n        this.state.csv !== null\n          ? this.setState({ name: this.state.csv[0]['Extension Name'] })\n          : null;\n      });\n    }\n  };\n\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Header\n          style={{\n            background: '#6441a4'\n          }}>\n          <h1 style={{ color: '#fff' }}>\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              <Icon\n                type='github'\n                style={{ color: '#fff', fontSize: '1.5em', marginTop: 10, marginRight: 20 }}\n              />\n            </a>\n            Extension Overview: {this.state.name}\n          </h1>\n        </Header>\n        <Content>\n          <ImportTwitchCSV handleFileChosen={this.handleFileChosen} />\n          {this.state.csv !== null ? <ContentBox csv={this.state.csv} /> : 'Please Upload CSV'}\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { PureComponent } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from './types';\n\nconst makeData = (csv: ITwitchExtensionPrimitiveCSV[]): IDataInstalls[] => {\n  let data: IDataInstalls[] = [];\n  csv.filter((item, index) => {\n    if (index >= 0 && index <= 6) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      data.push(install);\n      return item;\n    }\n  });\n  data.reverse();\n  return data;\n};\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n}\nexport const StatisticInstallGraph = ({ data }: IProps): JSX.Element => (\n  <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n    <BarChart data={makeData(data)}>\n      <CartesianGrid strokeDasharray='3 3' />\n      <XAxis dataKey='name' />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Bar dataKey='install' fill='#6441a4' />\n      <Bar dataKey='uninstalls' fill='#392e5c' />\n      <Bar dataKey='activations' fill='#9a7fcc' />\n    </BarChart>\n  </ResponsiveContainer>\n);\n","import React, { PureComponent } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nimport { IDataBitsStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\nconst makeData = (csv: ITwitchExtensionPrimitiveCSV[]): IDataBitsStatistic[] => {\n  let data: IDataBitsStatistic[] = [];\n  csv.filter((item, index) => {\n    if (index >= 0 && index <= 6) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      data.push(bits);\n      return bits;\n    }\n  });\n  data.reverse();\n  return data;\n};\n\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n}\nexport const StatisticBitsGraph = ({ data }: IProps) => (\n  <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n    <ComposedChart data={makeData(data)}>\n      <CartesianGrid stroke='#f5f5f5' />\n      <XAxis dataKey='name' />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n      <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n      <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n      <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n    </ComposedChart>\n  </ResponsiveContainer>\n);\n"],"sourceRoot":""}