{"version":3,"sources":["containers/manual-build-graph.tsx"],"names":["GlobalCalendar","lazy","Promise","all","__webpack_require__","e","then","bind","TopRow","GraphComposed","GraphRadar","GraphStackedArea","TabContent","TabPane","Monetization","memo","_ref","data","load","options","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","Fragment","react__WEBPACK_IMPORTED_MODULE_6__","fallback","_layout__WEBPACK_IMPORTED_MODULE_7__","antd_es_skeleton__WEBPACK_IMPORTED_MODULE_3__","active","antd_es_card__WEBPACK_IMPORTED_MODULE_1__","loading","bordered","bodyStyle","padding","className","antd_es_tabs__WEBPACK_IMPORTED_MODULE_5__","tabBarExtraContent","size","tabBarStyle","marginBottom","title","content","area","name","line","firstBar","secondBar","domains","radarA","value","radarB","radarC","radarD","firtArea","secondArea","thirdArea","fourthArea","makeContent","map","c","index","tab","key","concat","MonetizationBox","connect","state","manualBuild","monetization","topRow"],"mappings":"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","file":"static/js/29.9b71c8e4.chunk.js","sourcesContent":["import React, { lazy, Suspense, memo, NamedExoticComponent, ReactNode } from 'react';\nimport { PageLoading } from '../layout';\nimport { AppState, IGraphBuild, ITopRowManualBuild } from '../store';\nimport { connect } from 'react-redux';\nimport { Card, Tabs, Skeleton } from 'antd';\n\nconst GlobalCalendar = lazy(() => import('../components/global-calendar'));\nconst TopRow = lazy(() => import('../components/top-row/manual-build-graph'));\nconst GraphComposed = lazy(() => import('../components/charts/composed'));\nconst GraphRadar = lazy(() => import('../components/charts/radar'));\nconst GraphStackedArea = lazy(() => import('../components/charts/stacked-area'));\nconst TabContent = lazy(() => import('../components/tab-content'));\n\nconst { TabPane } = Tabs;\n\ninterface DispachProps {}\ninterface MapStateToProps {\n  load: boolean;\n  options: ITopRowManualBuild[];\n  data: IGraphBuild[];\n}\ntype Props = DispachProps & MapStateToProps;\n\ninterface ITabsContent {\n  title: string;\n  content: ReactNode;\n}\n\nconst makeContent = (data: IGraphBuild[], options: ITopRowManualBuild[]): ITabsContent[] => [\n  {\n    title: 'Composed',\n    content: (\n      <GraphComposed\n        data={data}\n        area={options[0].name}\n        line={options[1].name}\n        firstBar={options[2].name}\n        secondBar={options[3].name}\n      />\n    )\n  },\n  {\n    title: 'Radar',\n    content: (\n      <GraphRadar\n        data={data}\n        domains={'date'}\n        radarA={{ name: options[0].name, value: options[0].name }}\n        radarB={{ name: options[1].name, value: options[1].name }}\n        radarC={{ name: options[2].name, value: options[2].name }}\n        radarD={{ name: options[3].name, value: options[3].name }}\n      />\n    )\n  },\n  {\n    title: 'Stacked Area',\n    content: (\n      <GraphStackedArea\n        data={data}\n        firtArea={options[0].name}\n        secondArea={options[1].name}\n        thirdArea={options[2].name}\n        fourthArea={options[3].name}\n      />\n    )\n  }\n];\n\nconst Monetization: NamedExoticComponent<Props> = memo(\n  ({ data, load, options }): JSX.Element => (\n    <>\n      <Suspense fallback={<PageLoading />}>\n        <TopRow />\n      </Suspense>\n      <Suspense fallback={<Skeleton active />}>\n        <Card loading={load} bordered={true} bodyStyle={{ padding: 0 }}>\n          <div className={'analyzeCard'}>\n            <Tabs\n              tabBarExtraContent={<GlobalCalendar />}\n              size='large'\n              tabBarStyle={{ marginBottom: 24 }}>\n              {data === null\n                ? null\n                : makeContent(data, options).map((c, index) => (\n                    <TabPane tab={c.title} key={`${index}`}>\n                      <Suspense fallback={<Skeleton active />}>\n                        <TabContent>{c.content}</TabContent>\n                      </Suspense>\n                    </TabPane>\n                  ))}\n            </Tabs>\n            ;\n          </div>\n        </Card>\n      </Suspense>\n    </>\n  )\n);\nconst mapStateToProps = (state: AppState): MapStateToProps => ({\n  data: state.manualBuild.data,\n  load: state.monetization.load,\n  options: state.manualBuild.topRow\n});\n\nconst MonetizationBox = connect(\n  mapStateToProps,\n  null\n)(Monetization);\n\nexport default memo(() => <MonetizationBox />);\n"],"sourceRoot":""}