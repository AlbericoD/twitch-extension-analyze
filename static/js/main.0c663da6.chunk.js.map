{"version":3,"sources":["components/install-statistic-graph.tsx","components/bits-statistic-graph.tsx","components/index.tsx","components/upload-csv.tsx","components/statistics-top-panel.tsx","components/statistics-panel-install.tsx","components/statistics-panel-bits.tsx","components/style.tsx","components/content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","StatisticInstallGraph","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","recharts__WEBPACK_IMPORTED_MODULE_1__","makeData","csv","initialDateIndex","lastDateIndex","data","filter","item","index","install","name","Date","activations","parseInt","Activations","Installs","uninstalls","Uninstalls","push","reverse","_ref","a","createElement","width","aspect","strokeDasharray","dataKey","fill","StatisticBitsGraph","bits","USD","parseFloat","bitsUsed","transactions","stroke","type","barSize","_upload_csv__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__","o","_content__WEBPACK_IMPORTED_MODULE_3__","ImportTwitchCSV","handleFileChosen","react__WEBPACK_IMPORTED_MODULE_4___default","className","antd_es_input__WEBPACK_IMPORTED_MODULE_1__","accept","onChange","e","target","files","placeholder","prefix","antd_es_icon__WEBPACK_IMPORTED_MODULE_3__","style","color","margin","padding","statisticsPanel","title","precision","icon","StatisticsTopPanel","css","value","react_default","row","gutter","map","col","span","key","statistic","valueStyle","StatisticsPanelInstall","cardCss","statisticCss","children","card","Grid","reduce","prev","next","suffix","concat","divider","background","StatisticsPanelBits","cardBody","paddingTop","border","boxShadow","gridStyle","textAlign","gridStyleStatisc","statisticStyle","ContentBox","statistics_top_panel_StatisticsTopPanel","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph","Header","Sider","Content","Footer","RangePicker","dateFormat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleFileRead","fileReader","result","content","setState","csvJSON","length","toggle","collapsed","file","load","onloadend","readAsText","makeRanges","First Extension Release - Last Date CSV","moment","Last 7 Days","Last 30 Days","parseDateToIndex","dates","forEach","date","ind","findIndex","format","FileReader","uploadCSV","lines","split","headers","i","obj","currentline","j","undefined","_this2","_this$state","layout","trigger","collapsible","breakpoint","href","fontSize","menu","theme","mode","defaultSelectedKeys","Item","disabled","onClick","marginTop","marginRight","page_header","subTitle","components","defaultValue","ranges","size","empty","height","description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c663da6.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from './types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataInstalls[] => {\n  let data: IDataInstalls[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      data.push(install);\n      return item;\n    }\n  });\n  data.reverse();\n  return data;\n};\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticInstallGraph = ({\n  data,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <BarChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='install' fill='#6441a4' />\n        <Bar dataKey='uninstalls' fill='#392e5c' />\n        <Bar dataKey='activations' fill='#9a7fcc' />\n      </BarChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { PureComponent, Fragment } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\n\nimport { IDataBitsStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataBitsStatistic[] => {\n  let data: IDataBitsStatistic[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      data.push(bits);\n      return bits;\n    }\n  });\n  data.reverse();\n  return data;\n};\n\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticBitsGraph = ({ data, initialDateIndex, lastDateIndex }: IProps) => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <ComposedChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <CartesianGrid stroke='#f5f5f5' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n        <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n        <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n      </ComposedChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","export * from './upload-csv';\nexport * from './types';\nexport * from './install-statistic-graph';\nexport * from './content';\nexport * from './bits-statistic-graph';\n","import React from 'react';\nimport { Input, Icon } from 'antd';\n\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <label className='label'>\n      <Input\n        type='file'\n        accept='.csv'\n        onChange={(e: any) => handleFileChosen(e.target.files[0])}\n        placeholder='Click to Upload'\n        prefix={<Icon type='upload' style={{ color: 'rgba(0,0,0,.25)', margin: 30, padding: 5 }} />}\n      />\n    </label>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations (Total)'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls (Total)'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used (BITS)'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={2}\n          prefix={<Icon type='like' />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: '#19171c',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\n","import React from 'react';\nimport { Card, Button } from 'antd';\nimport { StatisticsTopPanel } from './statistics-top-panel';\nimport { StatisticsPanelInstall } from './statistics-panel-install';\nimport { StatisticsPanelBits } from './statistics-panel-bits';\nimport { StatisticInstallGraph } from './install-statistic-graph';\nimport { StatisticBitsGraph } from './bits-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV } from './types';\nimport { cardBody, statisticStyle, gridStyle, gridStyleStatisc } from './style';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const ContentBox = ({ csv, initialDateIndex, lastDateIndex }: IProps): JSX.Element => (\n  <Card style={cardBody}>\n    <Card.Grid style={gridStyleStatisc}>\n      <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelInstall cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticInstallGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelInstall>\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticBitsGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelBits>\n    </Card.Grid>\n  </Card>\n);\n","import React, { Component } from 'react';\nimport { ImportTwitchCSV, ContentBox, ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Layout, Icon, DatePicker, Row, Col, PageHeader, Menu, Empty } from 'antd';\nimport moment, { Moment } from 'moment';\nimport { RangePickerPresetRange } from 'antd/lib/date-picker/interface';\n\nconst { Header, Sider, Content, Footer } = Layout;\n\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\ninterface IRange {\n  [range: string]: RangePickerPresetRange;\n}\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n  initialDateIndex: number;\n  lastDateIndex: number;\n  collapsed: boolean;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name',\n      initialDateIndex: 0,\n      lastDateIndex: 0,\n      collapsed: false\n    };\n  }\n  csvJSON(csv: string): ITwitchExtensionPrimitiveCSV[] {\n    const lines = csv.split('\\n');\n    const headers = lines[0].split(',');\n    let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n    for (let i = 1; i < lines.length - 1; i++) {\n      let obj: any = {};\n      let currentline = lines[i].split(',');\n      for (let j = 0; j < headers.length; j++) {\n        if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n      }\n      result.push(obj);\n    }\n    return result;\n  }\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: this.csvJSON(content) }, () => {\n        if (this.state.csv !== null) {\n          this.setState({\n            name: this.state.csv[0]['Extension Name'],\n            initialDateIndex: this.setState.length - 1,\n            lastDateIndex: 0\n          });\n        }\n      });\n    }\n  };\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  };\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n  makeRanges = (data: ITwitchExtensionPrimitiveCSV[]): IRange => {\n    if (data.length >= 0 && data.length <= 6) {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ],\n        'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)]\n      };\n    } else if (data.length >= 0 && data.length >= 29) {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ],\n        'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)],\n        'Last 30 Days': [moment(data[29].Date, dateFormat), moment(data[0].Date, dateFormat)]\n      };\n    } else {\n      return {\n        'First Extension Release - Last Date CSV': [\n          moment(data[data.length - 1].Date, dateFormat),\n          moment(data[0].Date, dateFormat)\n        ]\n      };\n    }\n  };\n\n  parseDateToIndex = (dates: Moment[]) => {\n    const { csv } = this.state;\n    if (csv !== null && dates.length === 2) {\n      dates.forEach((date, ind) => {\n        const index = csv.findIndex(item => item.Date === date.format('YYYY-MM-DD'));\n        if (index !== -1 && ind === 0) this.setState({ initialDateIndex: index });\n        if (index !== -1 && ind === 1) this.setState({ lastDateIndex: index });\n      });\n    }\n  };\n  render() {\n    const { csv, initialDateIndex, lastDateIndex } = this.state;\n    return (\n      <Layout>\n        <Sider\n          trigger={null}\n          collapsible\n          collapsed={this.state.collapsed}\n          breakpoint='sm'\n          style={{\n            background: '#0f0e11',\n            border: '1px solid hsla(0,0%,100%,.09)',\n            boxShadow:\n              '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n          }}>\n          <div className='logo'>\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              <Icon type='github' style={{ color: '#fff', fontSize: '1.5em', margin: '5px 6px' }} />\n            </a>\n          </div>\n          <Menu theme='dark' mode='inline' defaultSelectedKeys={['1']}>\n            <Menu.Item\n              key='1'\n              style={{\n                background: '#6441a4',\n                border: '1px solid hsla(0,0%,100%,.09)'\n              }}>\n              <Icon type='dashboard' />\n              <span>Overview</span>\n            </Menu.Item>\n            <Menu.Item\n              key='2'\n              disabled\n              style={{\n                background: '#6441a4',\n                border: '1px solid hsla(0,0%,100%,.09)'\n              }}>\n              <Icon type='video-camera' />\n              <span>Graph Detail 1 </span>\n            </Menu.Item>\n            <Menu.Item\n              key='3'\n              disabled\n              style={{\n                background: '#6441a4',\n                border: '1px solid hsla(0,0%,100%,.09)'\n              }}>\n              <Icon type='upload' />\n              <span>Graph Detail 2</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header\n            style={{\n              background: '#6441a4'\n            }}>\n            <h1 style={{ color: '#fff' }}>\n              <Icon\n                className='trigger'\n                type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                onClick={this.toggle}\n                style={{ color: '#fff', fontSize: '1.5em', marginTop: 10, marginRight: 100 }}\n              />\n              &nbsp;&nbsp;Extension Overview: {this.state.name}\n            </h1>\n          </Header>\n          <Content>\n            <Row gutter={16}>\n              <Col span={12}>\n                <PageHeader\n                  title='CSV File'\n                  subTitle={<ImportTwitchCSV handleFileChosen={this.handleFileChosen} />}\n                />\n              </Col>\n              <Col span={12}>\n                <PageHeader\n                  title='Graph Range Date'\n                  subTitle={\n                    csv !== null ? (\n                      <RangePicker\n                        defaultValue={[\n                          moment(csv[csv.length - 1].Date, dateFormat),\n                          moment(csv[0].Date, dateFormat)\n                        ]}\n                        ranges={this.makeRanges(csv)}\n                        format={dateFormat}\n                        size={'large'}\n                        onChange={(e: any) => this.parseDateToIndex(e)}\n                      />\n                    ) : (\n                      'Please, Upload CSV'\n                    )\n                  }\n                />\n              </Col>\n              <Col span={24}>\n                {csv !== null ? (\n                  <ContentBox\n                    csv={csv}\n                    initialDateIndex={initialDateIndex}\n                    lastDateIndex={lastDateIndex}\n                  />\n                ) : (\n                  <Empty\n                    style={{ height: '75vh' }}\n                    description={<span>Please click the button above to import your CSV file</span>}\n                  />\n                )}\n              </Col>\n            </Row>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Extension Analyze ©2019 Created by\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              Albérico Dias Barreto Filho\n            </a>\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}