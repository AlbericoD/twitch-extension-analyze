{"version":3,"sources":["components/upload-csv.tsx","components/index.tsx","components/style.tsx","components/menu/sider.tsx","components/menu/top.tsx","components/statistics-panel/statistics-panel-bits.tsx","components/statistics-panel/statistics-panel-install.tsx","components/statistics-panel/statistics-panel-iteration.tsx","components/statistics-panel/statistics-top-panel.tsx","components/graphs/bits-statistic-graph.tsx","components/graphs/install-statistic-graph.tsx","components/graphs/statistics-panel-iteration-graph.tsx","containers/overview.tsx","containers/installations-graph.tsx","containers/interation-graph.tsx","containers/monetization-graph.tsx","containers/content.tsx","utils/csv-to-json.ts","App.tsx","utils/make-ranges.ts","serviceWorker.ts","index.tsx"],"names":["ImportTwitchCSV","_ref","handleFileChosen","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","antd_es_input__WEBPACK_IMPORTED_MODULE_1__","type","accept","onChange","e","target","files","placeholder","__webpack_require__","_types__WEBPACK_IMPORTED_MODULE_1__","o","d","__webpack_exports__","_upload_csv__WEBPACK_IMPORTED_MODULE_2__","cardBody","gridStyle","gridStyleStatisc","statisticStyle","graphCardStyle","margin","paddingTop","border","boxShadow","width","textAlign","background","color","options","key","icon","name","Sider","collapsed","handleClick","onCollapse","loadedCsv","current","react_default","layout","collapsible","breakpoint","style","href","fontSize","es_menu","theme","mode","defaultSelectedKeys","selectedKeys","onClick","map","option","Item","disabled","Top","children","lineHeight","page_header","title","subTitle","StatisticsPanelBits","cardCss","statisticCss","csv","row","gutter","col","span","card","Grid","statistic","value","item","parseFloat","reduce","prev","next","prefix","precision","valueStyle","parseInt","divider","StatisticsPanelInstall","Activations","Uninstalls","suffix","concat","Installs","StatisticsPanelIteration","Minimizations","statisticsPanel","StatisticsTopPanel","css","index","makeData","initialDateIndex","lastDateIndex","data","filter","bits","Date","USD","bitsUsed","transactions","push","reverse","StatisticBitsGraph","react","es6","aspect","stroke","dataKey","fill","barSize","install","activations","uninstalls","StatisticInstallGraph","strokeDasharray","interactionRate","minimizations","unminimizations","StatisticIteractionGraph","syncId","OverViewBox","statistics_top_panel_StatisticsTopPanel","statistics_panel_install_StatisticsPanelInstall","install_statistic_graph_StatisticInstallGraph","statistics_panel_bits_StatisticsPanelBits","bits_statistic_graph_StatisticBitsGraph","InstallationsGraphBox","padding","InterationGraphBox","statistics_panel_iteration_StatisticsPanelIteration","statistics_panel_iteration_graph_StatisticIteractionGraph","MonetizationGraphBox","ContentBox","props","menu","empty","height","description","components","overview_OverViewBox","installations_graph_InstallationsGraphBox","monetization_graph_MonetizationGraphBox","interation_graph_InterationGraphBox","panels","csvToJSON","lines","split","headers","result","i","length","obj","currentline","j","undefined","Header","Content","Footer","RangePicker","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","ms","arguments","setTimeout","setState","load","handleFileRead","fileReader","content","toggle","bind","file","onloadend","readAsText","parseDateToIndex","dates","forEach","date","ind","findIndex","format","FileReader","uploadCSV","_this2","_this$state","minHeight","sider_Sider","marginBottom","position","zIndex","top_Top","defaultValue","moment","ranges","First Extension Release - Last Date CSV","Last 7 Days","Last 30 Days","size","marginTop","spin","tip","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.172ee15b.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\n\ninterface IProps {\n  handleFileChosen(event: any): void;\n}\nexport const ImportTwitchCSV = ({ handleFileChosen }: IProps) => {\n  return (\n    <label className='label'>\n      <Input\n        type='file'\n        accept='.csv'\n        onChange={(e: any) => handleFileChosen(e.target.files[0])}\n        placeholder='Click to Upload'\n      />\n    </label>\n  );\n};\n","export * from './style';\nexport * from './types';\nexport * from './upload-csv';\n","import { CSSProperties } from 'react';\nexport const cardBody: CSSProperties = {\n  margin: 16,\n  paddingTop: 10,\n  // background: '#0f0e11',\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n\nexport const gridStyle: CSSProperties = {\n  width: '50%',\n  textAlign: 'center',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const gridStyleStatisc: CSSProperties = {\n  width: '100%',\n  textAlign: 'center',\n  background: 'rgb(25, 23, 28)',\n  border: '1px solid hsla(0,0%,100%,.05)',\n  boxShadow:\n    '0 2px 4px -1px rgba(0,0,0,.34),0 2px 2px -2px rgba(0,0,0,.26),0 1px 4px 0 rgba(0,0,0,.28)'\n};\nexport const statisticStyle: CSSProperties = {\n  color: '#faf9fa'\n};\nexport const graphCardStyle: CSSProperties = {\n  margin: 1,\n  paddingTop: 1,\n  border: '1px solid hsla(0,0%,100%,.09)',\n  boxShadow:\n    '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n};\n","import React from 'react';\nimport { Layout, Menu, Icon } from 'antd';\n\ninterface IProps {\n  collapsed: boolean;\n  handleClick: (event: any) => void;\n  onCollapse: (event: any) => void;\n  loadedCsv: boolean;\n  current: string;\n}\ninterface IOptions {\n  key: string;\n  icon: string;\n  name: string;\n}\nconst options: IOptions[] = [\n  {\n    key: 'upload-csv',\n    icon: 'upload',\n    name: 'Upload CSV'\n  },\n  {\n    key: 'overview',\n    icon: 'dashboard',\n    name: 'Overview'\n  },\n  {\n    key: 'installations',\n    icon: 'bar-chart',\n    name: 'Installations Graph '\n  },\n  {\n    key: 'monetization',\n    icon: 'line-chart',\n    name: 'Monetization Graph'\n  },\n  {\n    key: 'iteraction',\n    icon: 'area-chart',\n    name: 'Iteration Graph'\n  }\n];\n\nexport const Sider = ({\n  collapsed,\n  handleClick,\n  onCollapse,\n  loadedCsv,\n  current\n}: IProps): JSX.Element => (\n  <Layout.Sider\n    collapsible\n    collapsed={collapsed}\n    onCollapse={onCollapse}\n    breakpoint='sm'\n    style={{\n      background: '#0f0e11',\n      border: '1px solid hsla(0,0%,100%,.09)',\n      boxShadow:\n        '0 2px 4px -1px hsla(0,0%,100%,.05),0 2px 2px -2px hsla(0,0%,100%,.05),0 1px 4px 0 hsla(0,0%,100%,.05)'\n    }}>\n    <div className='logo'>\n      <a href='https://github.com/AlbericoD/twitch-extension-analyze' target='__blank'>\n        <Icon type='github' style={{ color: '#fff', fontSize: '1.5em', margin: '5px 6px' }} />\n      </a>\n    </div>\n    <Menu\n      theme='dark'\n      mode='inline'\n      defaultSelectedKeys={['upload-csv']}\n      selectedKeys={[current]}\n      onClick={handleClick}>\n      {options.map(option => (\n        <Menu.Item key={option.key} disabled={loadedCsv}>\n          <Icon type={option.icon} />\n          <span>{option.name}</span>\n        </Menu.Item>\n      ))}\n    </Menu>\n  </Layout.Sider>\n);\n","import React, { ReactNode } from 'react';\nimport { Menu, PageHeader } from 'antd';\n\ninterface IProps {\n  name: string;\n  children: ReactNode;\n}\nexport const Top = ({ name, children }: IProps): JSX.Element => (\n  <Menu theme='light' mode='horizontal' defaultSelectedKeys={['2']} style={{ lineHeight: '64px' }}>\n    <Menu.Item key='0'>\n      <PageHeader title='Extension: ' subTitle={name} />\n    </Menu.Item>\n    <Menu.Item key='2'>{children}</Menu.Item>\n  </Menu>\n);\n","import { Row, Col, Card, Statistic, Divider, Icon } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelBits = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Revenue (USD)'\n          value={csv\n            .map(item => parseFloat(item['Bits Revenue USD']))\n            .reduce((prev, next) => prev + next, 0)}\n          prefix={<Icon type='dollar' />}\n          precision={2}\n          valueStyle={{ color: '#b19dd8' }}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Bits Used (BITS)'\n          value={csv\n            .map(item => parseInt(item['Bits Used']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={2}\n          prefix={<Icon type='like' />}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelInstall = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Activations (Total)'\n          value={csv.map(item => parseInt(item.Activations)).reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Uninstalls (Total)'\n          value={csv.map(item => parseInt(item.Uninstalls)).reduce((prev, next) => prev + next, 0)}\n          suffix={`/ ${csv\n            .map(item => parseInt(item.Installs))\n            .reduce((prev, next) => prev + next, 0)}`}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import { Row, Col, Card, Statistic, Divider } from 'antd';\nimport React, { CSSProperties, ReactNode } from 'react';\nimport { ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  cardCss: CSSProperties;\n  statisticCss: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  children: ReactNode;\n}\nexport const StatisticsPanelIteration = ({ cardCss, statisticCss, csv, children }: IProps) => (\n  <Row gutter={16}>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          title='Interaction Rate'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item['Interaction Rate']))\n            .reduce((prev, next) => prev + next, 0)}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={4}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n    <Col span={12}>\n      <Card.Grid style={cardCss}>\n        <Statistic\n          valueStyle={{ color: '#b19dd8' }}\n          title='Minimizations'\n          value={csv\n            .map((item: ITwitchExtensionPrimitiveCSV) => parseFloat(item.Minimizations))\n            .reduce((prev, next) => prev + next, 0)}\n          precision={4}\n          style={statisticCss}\n        />\n      </Card.Grid>\n    </Col>\n\n    <Divider style={{ background: 'hsla(0,0%,100%,.05)' }} />\n    <Col span={24}>{children}</Col>\n  </Row>\n);\n","import React, { CSSProperties } from 'react';\nimport { Row, Col, Icon, Statistic } from 'antd';\nimport { IStatistic, ITwitchExtensionPrimitiveCSV } from '../types';\n\ninterface IProps {\n  css: CSSProperties;\n  value: ITwitchExtensionPrimitiveCSV;\n}\n\nconst statisticsPanel: IStatistic[] = [\n  { title: 'Unique Active Channels Last 7 Days', precision: 0, icon: 'select' },\n  { title: 'Unique Renderers Last 7 Days', precision: 0, icon: 'stock' },\n  { title: 'Unique Viewers Last 7 Days', precision: 0, icon: 'eye' },\n  { title: 'Unique Mouseenters Last 7 Days', precision: 0, icon: 'heart' }\n];\n\nexport const StatisticsTopPanel = ({ css, value }: IProps): JSX.Element => (\n  <Row gutter={16}>\n    {statisticsPanel.map((item: IStatistic, index) => (\n      <Col span={6} key={index}>\n        <Statistic\n          style={css}\n          title={item.title}\n          value={value[item.title]}\n          valueStyle={{ color: '#b19dd8' }}\n          precision={0}\n          prefix={<Icon type={item.icon} />}\n        />\n      </Col>\n    ))}\n  </Row>\n);\n","import React, { Fragment } from 'react';\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush\n} from 'recharts';\n\nimport { IDataBitsStatistic, ITwitchExtensionPrimitiveCSV } from '../types';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataBitsStatistic[] => {\n  let data: IDataBitsStatistic[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const bits: IDataBitsStatistic = {\n        name: item.Date,\n        USD: parseFloat(item['Bits Revenue USD']),\n        bitsUsed: parseFloat(item['Bits Used']),\n        transactions: parseFloat(item['Bits Transactions'])\n      };\n      data.push(bits);\n      return bits;\n    }\n  });\n  data.reverse();\n  return data;\n};\n\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticBitsGraph = ({ data, initialDateIndex, lastDateIndex }: IProps) => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <ComposedChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <Brush />\n        <CartesianGrid stroke='#f5f5f5' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Area type='monotone' dataKey='USD' fill='#392e5c' stroke='#8884d8' />\n        <Bar dataKey='transactions' barSize={20} fill='#6441a4' />\n        <Line type='monotone' dataKey='bitsUsed' stroke='#9a7fcc' />\n      </ComposedChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { Fragment } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Brush\n} from 'recharts';\nimport { ITwitchExtensionPrimitiveCSV, IDataInstalls } from '../types';\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IDataInstalls[] => {\n  let data: IDataInstalls[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IDataInstalls = {\n        name: item.Date,\n        activations: parseInt(item.Activations),\n        install: parseInt(item.Installs),\n        uninstalls: parseInt(item.Uninstalls)\n      };\n      data.push(install);\n      return item;\n    }\n  });\n  data.reverse();\n  return data;\n};\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticInstallGraph = ({\n  data,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Fragment>\n    <ResponsiveContainer width='100%' aspect={2.0 / 1.0}>\n      <BarChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n        <Brush />\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='name' />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey='install' fill='#6441a4' />\n        <Bar dataKey='uninstalls' fill='#392e5c' />\n        <Bar dataKey='activations' fill='#9a7fcc' />\n      </BarChart>\n    </ResponsiveContainer>\n  </Fragment>\n);\n","import React, { Fragment } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Brush,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n  ComposedChart,\n  Bar\n} from 'recharts';\nimport { ITwitchExtensionPrimitiveCSV, IIteraction } from '../types';\nimport { Row, Col } from 'antd';\n\nconst makeData = (\n  csv: ITwitchExtensionPrimitiveCSV[],\n  initialDateIndex: number,\n  lastDateIndex: number\n): IIteraction[] => {\n  let data: IIteraction[] = [];\n  csv.filter((item, index) => {\n    if (index >= lastDateIndex && index <= initialDateIndex) {\n      const install: IIteraction = {\n        name: item.Date,\n        interactionRate: parseFloat(item['Interaction Rate']),\n        minimizations: parseFloat(item['Minimization Rate']),\n        unminimizations: parseFloat(item['Unminimization Rate'])\n      };\n      data.push(install);\n      return item;\n    }\n  });\n  data.reverse();\n  return data;\n};\ninterface IProps {\n  data: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const StatisticIteractionGraph = ({\n  data,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Fragment>\n    <Row gutter={16}>\n      <Col span={12}>\n        <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n          <LineChart data={makeData(data, initialDateIndex, lastDateIndex)} syncId='anyId'>\n            <CartesianGrid strokeDasharray='3 3' />\n            <XAxis dataKey='name' />\n            <YAxis />\n            <Tooltip />\n            <Line type='monotone' dataKey='interactionRate' stroke='#8884d8' fill='#392e5c' />\n          </LineChart>\n        </ResponsiveContainer>\n      </Col>\n      <Col span={12}>\n        <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n          <AreaChart data={makeData(data, initialDateIndex, lastDateIndex)} syncId='anyId'>\n            <CartesianGrid strokeDasharray='3 3' />\n            <XAxis dataKey='name' />\n            <YAxis />\n            <Tooltip />\n            <Area type='monotone' dataKey='minimizations' stroke='#6441a4' fill='#9a7fcc' />\n          </AreaChart>\n        </ResponsiveContainer>\n      </Col>\n      <Col span={12}>\n        <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n          <LineChart data={makeData(data, initialDateIndex, lastDateIndex)} syncId='anyId'>\n            <CartesianGrid strokeDasharray='3 3' />\n            <XAxis dataKey='name' />\n            <YAxis />\n            <Tooltip />\n            <Line type='monotone' dataKey='unminimizations' stroke='#9a7fcc' fill='#6441a4' />\n            <Brush />\n          </LineChart>\n        </ResponsiveContainer>\n      </Col>\n      <Col span={12}>\n        <ResponsiveContainer width='100%' aspect={1.0 / 0.5}>\n          <ComposedChart data={makeData(data, initialDateIndex, lastDateIndex)}>\n            <CartesianGrid stroke='#f5f5f5' />\n            <XAxis dataKey='name' />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Area type='monotone' dataKey='unminimizations' fill='#6441a4' stroke='#8884d8' />\n            <Bar dataKey='interactionRate' barSize={20} fill='#392e5c' />\n            <Line type='monotone' dataKey='minimizations' stroke='#9a7fcc' />\n            <Brush />\n            {/* <Scatter dataKey=\"cnt\" fill=\"red\" /> */}\n          </ComposedChart>\n        </ResponsiveContainer>\n      </Col>\n    </Row>\n  </Fragment>\n);\n","import React, { CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport {\n  StatisticsTopPanel,\n  StatisticsPanelInstall,\n  StatisticsPanelBits\n} from '../components/statistics-panel';\nimport { StatisticInstallGraph, StatisticBitsGraph } from '../components/graphs';\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\ninterface IProps {\n  cardBody: CSSProperties;\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  gridStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const OverViewBox = ({\n  cardBody,\n  gridStyleStatisc,\n  statisticStyle,\n  gridStyle,\n  csv,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Card style={cardBody}>\n    <Card.Grid style={gridStyleStatisc}>\n      <StatisticsTopPanel css={statisticStyle} value={csv[0]} />\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelInstall cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticInstallGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelInstall>\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>\n      <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticBitsGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelBits>\n    </Card.Grid>\n  </Card>\n);\n","import React, { CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelInstall } from '../components/statistics-panel';\nimport { StatisticInstallGraph } from '../components/graphs/install-statistic-graph';\nimport { ITwitchExtensionPrimitiveCSV } from '../components';\n\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const InstallationsGraphBox = ({\n  gridStyleStatisc,\n  statisticStyle,\n  graphCardStyle,\n  csv,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Card style={graphCardStyle}>\n    <Card.Grid style={{ width: '100%', padding: 3 }}>\n      <StatisticsPanelInstall cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticInstallGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelInstall>\n    </Card.Grid>\n  </Card>\n);\n","import React, { CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelIteration } from '../components/statistics-panel';\nimport { ITwitchExtensionPrimitiveCSV } from '../components';\nimport { StatisticIteractionGraph } from '../components/graphs';\n\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const InterationGraphBox = ({\n  gridStyleStatisc,\n  statisticStyle,\n  graphCardStyle,\n  csv,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Card style={graphCardStyle}>\n    <Card.Grid style={{ width: '100%', padding: 3 }}>\n      <StatisticsPanelIteration cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticIteractionGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelIteration>\n    </Card.Grid>\n  </Card>\n);\n","import React, { CSSProperties } from 'react';\nimport { Card } from 'antd';\nimport { StatisticsPanelBits } from '../components/statistics-panel';\nimport { StatisticBitsGraph } from '../components/graphs';\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\ninterface IProps {\n  gridStyleStatisc: CSSProperties;\n  statisticStyle: CSSProperties;\n  graphCardStyle: CSSProperties;\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n}\nexport const MonetizationGraphBox = ({\n  graphCardStyle,\n  gridStyleStatisc,\n  statisticStyle,\n  csv,\n  initialDateIndex,\n  lastDateIndex\n}: IProps): JSX.Element => (\n  <Card style={graphCardStyle}>\n    <Card.Grid style={{ width: '100%', padding: 3 }}>\n      <StatisticsPanelBits cardCss={gridStyleStatisc} statisticCss={statisticStyle} csv={csv}>\n        <StatisticBitsGraph\n          data={csv}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n        />\n      </StatisticsPanelBits>\n    </Card.Grid>\n  </Card>\n);\n","import React from 'react';\n\nimport { ITwitchExtensionPrimitiveCSV } from '../components/types';\nimport {\n  cardBody,\n  statisticStyle,\n  gridStyle,\n  graphCardStyle,\n  gridStyleStatisc\n} from '../components/style';\n\nimport { OverViewBox } from './overview';\nimport { InstallationsGraphBox } from './installations-graph';\nimport { MonetizationGraphBox } from './monetization-graph';\nimport { InterationGraphBox } from './interation-graph';\nimport { Empty, PageHeader } from 'antd';\nimport { ImportTwitchCSV } from '../components';\n\ninterface IProps {\n  csv: ITwitchExtensionPrimitiveCSV[];\n  initialDateIndex: number;\n  lastDateIndex: number;\n  menu: string;\n  handleFileChosen: (file: any) => void;\n}\nconst panels = ({\n  csv,\n  initialDateIndex,\n  lastDateIndex,\n  menu,\n  handleFileChosen\n}: IProps): JSX.Element => {\n  switch (menu) {\n    case 'upload-csv':\n      return (\n        <Empty\n          style={{ height: '75vh', margin: 20, padding: 30 }}\n          description={\n            <span>\n              Please click the button to import your CSV file <b>( V2+ )</b>\n            </span>\n          }>\n          <PageHeader\n            title='CSV File'\n            subTitle={<ImportTwitchCSV handleFileChosen={handleFileChosen} />}\n          />\n        </Empty>\n      );\n    case 'overview':\n      return (\n        <OverViewBox\n          cardBody={cardBody}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          gridStyle={gridStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n    case 'installations':\n      return (\n        <InstallationsGraphBox\n          graphCardStyle={graphCardStyle}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n    case 'monetization':\n      return (\n        <MonetizationGraphBox\n          graphCardStyle={graphCardStyle}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n    case 'iteraction':\n      return (\n        <InterationGraphBox\n          graphCardStyle={graphCardStyle}\n          gridStyleStatisc={gridStyleStatisc}\n          statisticStyle={statisticStyle}\n          initialDateIndex={initialDateIndex}\n          lastDateIndex={lastDateIndex}\n          csv={csv}\n        />\n      );\n\n    default:\n      return (\n        <Empty\n          style={{ height: '75vh', margin: 20, padding: 30 }}\n          description={<span>OPSSSS, strange you show up here</span>}\n        />\n      );\n  }\n};\nexport const ContentBox = (props: IProps): JSX.Element => panels(props);\n","import { ITwitchExtensionPrimitiveCSV } from '../components';\n\nexport const csvToJSON = (csv: string): ITwitchExtensionPrimitiveCSV[] => {\n  const lines = csv.split('\\n');\n  const headers = lines[0].split(',');\n  let result: ITwitchExtensionPrimitiveCSV[] = [];\n\n  for (let i = 1; i < lines.length - 1; i++) {\n    let obj: any = {};\n    let currentline = lines[i].split(',');\n    for (let j = 0; j < headers.length; j++) {\n      if (currentline[j] !== undefined && currentline[j] !== '') obj[headers[j]] = currentline[j];\n    }\n    result.push(obj);\n  }\n  return result;\n};\n","import React, { Component } from 'react';\nimport { Layout, DatePicker, Row, Col, PageHeader, Spin } from 'antd';\nimport moment, { Moment } from 'moment';\n\nimport { ITwitchExtensionPrimitiveCSV } from './components/index';\nimport { Sider, Top } from './components/menu';\nimport { ContentBox } from './containers';\nimport { makeRanges, csvToJSON } from './utils';\n\nconst { Header, Content, Footer } = Layout;\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\n\ninterface IState {\n  fileReader: FileReader;\n  uploadCSV: boolean;\n  load: boolean;\n  csv: ITwitchExtensionPrimitiveCSV[] | null;\n  name: string;\n  initialDateIndex: number;\n  lastDateIndex: number;\n  collapsed: boolean;\n  menu: string;\n}\nclass App extends Component<{}, IState> {\n  state: IState;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      fileReader: new FileReader(),\n      uploadCSV: false,\n      load: false,\n      csv: null,\n      name: 'Extension Name',\n      initialDateIndex: 0,\n      lastDateIndex: 0,\n      collapsed: false,\n      menu: 'upload-csv'\n    };\n  }\n  delay = (ms: number = 0, menu: string = this.state.menu): NodeJS.Timeout =>\n    setTimeout(() => {\n      this.setState({ load: false, menu });\n    }, ms);\n  handleFileRead = () => {\n    if (typeof this.state.fileReader.result === 'string') {\n      const content: string = this.state.fileReader.result;\n      this.setState({ csv: csvToJSON(content) }, () => {\n        setTimeout(\n          () => {\n            if (this.state.csv !== null) {\n              this.setState(\n                {\n                  name: this.state.csv[0]['Extension Name'],\n                  initialDateIndex: this.state.csv.length - 1,\n                  lastDateIndex: 0\n                },\n                () => this.setState({ load: false, menu: 'overview' })\n              );\n            }\n          },\n          this.state.csv !== null ? this.state.csv.length * 2 : 2\n        );\n      });\n    }\n  };\n\n  toggle = () => {\n    this.setState(\n      {\n        collapsed: !this.state.collapsed,\n        load: true\n      },\n      this.delay.bind(0.2)\n    );\n  };\n  handleClick = (e: any) => {\n    this.setState(\n      { menu: e.key, load: true },\n      this.delay.bind(this.state.csv !== null ? this.state.csv.length : 0.2)\n    );\n  };\n  handleFileChosen = (file: any) => {\n    this.setState({ load: true }, () => {\n      this.state.fileReader.onloadend = this.handleFileRead;\n      this.state.fileReader.readAsText(file);\n    });\n  };\n\n  parseDateToIndex = (dates: Moment[]) => {\n    const { csv } = this.state;\n    if (csv !== null && dates.length === 2) {\n      dates.forEach((date, ind) => {\n        const index = csv.findIndex(item => item.Date === date.format('YYYY-MM-DD'));\n        if (index !== -1 && ind === 0) this.setState({ initialDateIndex: index });\n        if (index !== -1 && ind === 1) this.setState({ lastDateIndex: index });\n      });\n    }\n  };\n  render() {\n    const { csv, initialDateIndex, lastDateIndex, menu, load } = this.state;\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider\n          current={this.state.menu}\n          collapsed={this.state.collapsed}\n          handleClick={this.handleClick}\n          onCollapse={this.toggle}\n          loadedCsv={this.state.csv === null}\n        />\n        <Layout style={{ padding: '0 0 24px', marginBottom: 20 }}>\n          <Header style={{ position: 'fixed', zIndex: 2, width: '100%' }}>\n            <Top name={this.state.name}>\n              {csv !== null ? (\n                <PageHeader\n                  title='Graph Range Date'\n                  subTitle={\n                    <RangePicker\n                      defaultValue={[\n                        moment(csv[csv.length - 1].Date, dateFormat),\n                        moment(csv[0].Date, dateFormat)\n                      ]}\n                      ranges={makeRanges(csv)}\n                      format={dateFormat}\n                      size={'large'}\n                      onChange={(e: any) => this.parseDateToIndex(e)}\n                      disabled={csv === null}\n                    />\n                  }\n                />\n              ) : (\n                'Graph Range Date'\n              )}\n            </Top>\n          </Header>\n          <Content style={{ width: '100%', minHeight: '70vh', marginTop: 60 }}>\n            <Row gutter={16}>\n              <Col span={24}>\n                {!load ? (\n                  <ContentBox\n                    menu={menu}\n                    initialDateIndex={initialDateIndex}\n                    lastDateIndex={lastDateIndex}\n                    handleFileChosen={this.handleFileChosen}\n                    csv={csv !== null ? csv : []}\n                  />\n                ) : (\n                  <div className='load-csv'>\n                    <Spin tip='loading ...' />\n                  </div>\n                )}\n              </Col>\n            </Row>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>\n            Extension Analyze ©2019 Created by&nbsp;&nbsp;\n            <a href='https://github.com/AlbericoD' target='__blank'>\n              Albérico Dias Barreto Filho\n            </a>\n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import { ITwitchExtensionPrimitiveCSV } from '../components';\nimport { RangePickerPresetRange } from 'antd/lib/date-picker/interface';\nimport moment from 'moment';\n\nconst dateFormat = 'YYYY/MM/DD';\n\ninterface IRange {\n  [range: string]: RangePickerPresetRange;\n}\nexport const makeRanges = (data: ITwitchExtensionPrimitiveCSV[]): IRange => {\n  if (data.length >= 0 && data.length <= 6) {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  } else if (data.length >= 0 && data.length >= 29) {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ],\n      'Last 7 Days': [moment(data[6].Date, dateFormat), moment(data[0].Date, dateFormat)],\n      'Last 30 Days': [moment(data[29].Date, dateFormat), moment(data[0].Date, dateFormat)]\n    };\n  } else {\n    return {\n      'First Extension Release - Last Date CSV': [\n        moment(data[data.length - 1].Date, dateFormat),\n        moment(data[0].Date, dateFormat)\n      ]\n    };\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}